From b47b80afed14041d5fad42cda1d70c7ced14395f Mon Sep 17 00:00:00 2001
From: Zhixiong Lin <zhixiong.lin@rock-chips.com>
Date: Tue, 10 Nov 2020 16:31:53 +0800
Subject: [PATCH 17/33] SurfaceFlinger: transform NV12_10 to NV12 or ARM_P010

Change-Id: Ib277b6ae6a0fa0d5103d12813717243dcdc00179
Signed-off-by: Zhixiong Lin <zhixiong.lin@rock-chips.com>
---
 libs/renderengine/Android.bp                  |   3 +
 libs/renderengine/gl/GLESRenderEngine.cpp     | 258 +++++++++++++++++-
 .../include/renderengine/LayerSettings.h      |   3 +
 services/surfaceflinger/Android.bp            |   1 +
 services/surfaceflinger/BufferLayer.cpp       |   2 +
 5 files changed, 264 insertions(+), 3 deletions(-)

diff --git a/libs/renderengine/Android.bp b/libs/renderengine/Android.bp
index dca87ba8e..9193bd8e0 100644
--- a/libs/renderengine/Android.bp
+++ b/libs/renderengine/Android.bp
@@ -31,6 +31,9 @@ cc_defaults {
         "libui",
         "libutils",
     ],
+    include_dirs:[
+        "hardware/rockchip/librga",
+    ],
     local_include_dirs: ["include"],
     export_include_dirs: ["include"],
 }
diff --git a/libs/renderengine/gl/GLESRenderEngine.cpp b/libs/renderengine/gl/GLESRenderEngine.cpp
index 880806a0b..1c38ecaea 100755
--- a/libs/renderengine/gl/GLESRenderEngine.cpp
+++ b/libs/renderengine/gl/GLESRenderEngine.cpp
@@ -51,6 +51,15 @@
 #include "ProgramCache.h"
 #include "filters/BlurFilter.h"
 
+#if RK_NV12_10_TO_NV12_BY_RGA
+#define UN_NEED_GL
+#include <include/RockchipRga.h>
+#endif
+
+#if (RK_NV12_10_TO_NV12_BY_NENO | RK_HDR)
+#include <dlfcn.h>
+#endif
+
 extern "C" EGLAPI const char* eglQueryStringImplementationANDROID(EGLDisplay dpy, EGLint name);
 
 bool checkGlError(const char* op, int lineNumber) {
@@ -113,6 +122,19 @@ void writePPM(const char* basename, GLuint width, GLuint height) {
 }
 
 namespace android {
+
+#if (RK_NV12_10_TO_NV12_BY_RGA | RK_NV12_10_TO_NV12_BY_NENO | RK_HDR)
+    typedef struct
+    {
+         sp<GraphicBuffer> yuvTexBuffer;
+         EGLImageKHR img;
+    } TexBufferImag;
+
+#define TexBufferMax  2
+#define TexKey 0x524f434b
+    static TexBufferImag yuvTeximg[TexBufferMax] = {{NULL,EGL_NO_IMAGE_KHR},{NULL,EGL_NO_IMAGE_KHR}};
+#endif
+
 namespace renderengine {
 namespace gl {
 
@@ -980,6 +1002,103 @@ EGLImageKHR GLESRenderEngine::createFramebufferImageIfNeeded(ANativeWindowBuffer
     return image;
 }
 
+#if (RK_NV12_10_TO_NV12_BY_RGA | RK_NV12_10_TO_NV12_BY_NENO | RK_HDR)
+  /* print time macros. */
+#define PRINT_TIME_START        \
+    struct timeval tpend1, tpend2;\
+    long usec1 = 0;\
+    gettimeofday(&tpend1,NULL);\
+
+#define PRINT_TIME_END(tag)        \
+    gettimeofday(&tpend2,NULL);\
+    usec1 = 1000*(tpend2.tv_sec - tpend1.tv_sec) + (tpend2.tv_usec- tpend1.tv_usec)/1000;\
+    if (property_get_bool("sys.hwc.time", 1)) \
+    ALOGD_IF(1,"%s use time=%ld ms",tag,usec1);\
+
+#if RK_NV12_10_TO_NV12_BY_RGA
+static int rgaCopyBit(sp<GraphicBuffer> src_buf, sp<GraphicBuffer> dst_buf, const Rect& rect)
+{
+    rga_info_t src, dst;
+    int src_l,src_t,src_r,src_b,src_h,src_stride,src_format;
+    int dst_l,dst_t,dst_r,dst_b,dst_h,dst_stride,dst_format;
+    RockchipRga& mRga = RockchipRga::get();
+    int ret = 0;
+
+    memset(&src, 0, sizeof(rga_info_t));
+    memset(&dst, 0, sizeof(rga_info_t));
+    src.fd = -1;
+    dst.fd = -1;
+
+    src_stride = src_buf->getStride();
+    src_format = src_buf->getPixelFormat();
+    src_h = src_buf->getHeight();
+
+    dst_stride = dst_buf->getStride();
+    dst_format = dst_buf->getPixelFormat();
+    dst_h = dst_buf->getHeight();
+
+    dst_l = src_l = rect.left;
+    dst_t = src_t = rect.top;
+    dst_r = src_r = rect.right;
+    dst_b = src_b = rect.bottom;
+    rga_set_rect(&src.rect, src_l, src_t, src_r - src_l, src_b - src_t, src_stride, src_h, src_format);
+    rga_set_rect(&dst.rect, dst_l, dst_t, dst_buf->getWidth(), dst_buf->getHeight(), dst_stride, dst_h, dst_format);
+
+    src.hnd = src_buf->handle;
+    dst.hnd = dst_buf->handle;
+//    mRga.RkRgaGetBufferFd(src_buf->handle, &src.fd);
+//    mRga.RkRgaGetBufferFd(dst_buf->handle, &dst.fd);
+//  src.rotation = rga_transform;
+//PRINT_TIME_START
+
+    ret = mRga.RkRgaBlit(&src, &dst, NULL);
+//PRINT_TIME_END("rgaCopyBit")
+    if(ret) {
+        ALOGD_IF(1,"rgaCopyBit  : src[x=%d,y=%d,w=%d,h=%d,ws=%d,hs=%d,format=0x%x],dst[x=%d,y=%d,w=%d,h=%d,ws=%d,hs=%d,format=0x%x]",
+            src.rect.xoffset, src.rect.yoffset, src.rect.width, src.rect.height, src.rect.wstride, src.rect.hstride, src.rect.format,
+            dst.rect.xoffset, dst.rect.yoffset, dst.rect.width, dst.rect.height, dst.rect.wstride, dst.rect.hstride, dst.rect.format);
+        ALOGD_IF(1,"rgaCopyBit : src hnd=%p,dst hnd=%p, src_format=0x%x ==> dst_format=0x%x\n",
+            (void*)src_buf->handle, (void*)(dst_buf->handle), src_format, dst_format);
+        return ret;
+    }
+
+    return ret;
+}
+#endif
+
+#if RK_HDR
+typedef unsigned char u8;
+typedef unsigned short u16;
+typedef unsigned int u32;
+typedef signed char s8;
+typedef signed short s16;
+typedef signed int s32;
+#define ARM_P010            0x4000000
+#define HDRUSAGE            0x3000000
+#define RK_XXX_PATH         "/system/lib64/librockchipxxx.so"
+typedef void (*__rockchipxxx)(u8 *src, u8 *dst, int w, int h, int srcStride, int dstStride, int area);
+
+static void* dso = NULL;
+static __rockchipxxx rockchipxxx = NULL;
+
+#define ALIGN(val, align) (((val) + ((align) - 1)) & ~((align) - 1))
+
+#elif RK_NV12_10_TO_NV12_BY_NENO
+
+typedef unsigned char u8;
+typedef unsigned short u16;
+typedef unsigned int u32;
+typedef signed char s8;
+typedef signed short s16;
+typedef signed int s32;
+#define RK_XXX_PATH         "/system/lib/librockchipxxx.so"
+typedef void (*__rockchipxxx3288)(u8 *src, u8 *dst, int w, int h, int srcStride, int dstStride, int area);
+
+static void* dso = NULL;
+static __rockchipxxx3288 rockchipxxx3288 = NULL;
+#endif
+
+#endif
 status_t GLESRenderEngine::drawLayers(const DisplaySettings& display,
                                       const std::vector<const LayerSettings*>& layers,
                                       ANativeWindowBuffer* const buffer,
@@ -1127,12 +1246,145 @@ status_t GLESRenderEngine::drawLayers(const DisplaySettings& display,
             isOpaque = layer->source.buffer.isOpaque;
 
             sp<GraphicBuffer> gBuf = layer->source.buffer.buffer;
-            bindExternalTextureBuffer(layer->source.buffer.textureName, gBuf,
-                                      layer->source.buffer.fence);
+#if (RK_NV12_10_TO_NV12_BY_RGA | RK_NV12_10_TO_NV12_BY_NENO | RK_HDR)
+            if(gBuf != NULL &&
+               gBuf->getPixelFormat() == HAL_PIXEL_FORMAT_YCrCb_NV12_10 )
+            {
+                //Rect CurrentCrop(0,0,3840,2160);
+                Rect CurrentCrop(layer->source.buffer.currentcrop);
+#if RK_HDR
+                const int yuvTexUsage = GraphicBuffer::USAGE_HW_TEXTURE | GRALLOC_USAGE_TO_USE_ARM_P010;
+                const int yuvTexFormat = HAL_PIXEL_FORMAT_YCrCb_NV12_10;
+#elif (RK_NV12_10_TO_NV12_BY_NENO | RK_NV12_10_TO_NV12_BY_RGA)
+                const int yuvTexUsage = GraphicBuffer::USAGE_HW_TEXTURE /*| HDRUSAGE*/;
+                //GraphicBuffer::USAGE_SW_WRITE_RARELY;
+                const int yuvTexFormat = HAL_PIXEL_FORMAT_YCrCb_NV12;
+#endif
+                static int yuvcnt;
+                int yuvIndex ;
+
+                yuvcnt ++;
+                yuvIndex = yuvcnt%2;
+#if (RK_HDR | RK_NV12_10_TO_NV12_BY_NENO)
+                int src_l,src_t,src_r,src_b,src_stride;
+                void *src_vaddr;
+                void *dst_vaddr;
+                src_l = CurrentCrop.left;
+                src_t = CurrentCrop.top;
+                src_r = CurrentCrop.right;
+                src_b = CurrentCrop.bottom;
+                src_stride = gBuf->getStride();
+                uint32_t w = src_r - src_l;
+#elif RK_NV12_10_TO_NV12_BY_RGA
+                //Since rga cann't support scalet to bigger than 4096 limit to 4096
+                uint32_t w = (CurrentCrop.getWidth() + 31) & (~31);
+                //ALOGD("rga10to8[%s %d] f:%x w:%d gH:%d\n",__FUNCTION__,__LINE__,gBuf->getPixelFormat(),w,gBuf->getHeight());
+#endif
+                if((yuvTeximg[yuvIndex].yuvTexBuffer != NULL) &&
+                   (yuvTeximg[yuvIndex].yuvTexBuffer->getWidth() != w ||
+                    yuvTeximg[yuvIndex].yuvTexBuffer->getHeight() != gBuf->getHeight()))
+                {
+                    yuvTeximg[yuvIndex].yuvTexBuffer = NULL;
+                }
+                if(yuvTeximg[yuvIndex].yuvTexBuffer == NULL)
+                {
+                    yuvTeximg[yuvIndex].yuvTexBuffer = new GraphicBuffer(w, gBuf->getHeight(),yuvTexFormat, yuvTexUsage);
+                }
+
+#if (RK_HDR | RK_NV12_10_TO_NV12_BY_NENO)
+                gBuf->lock(GRALLOC_USAGE_SW_READ_OFTEN,&src_vaddr);
+                yuvTeximg[yuvIndex].yuvTexBuffer->lock(GRALLOC_USAGE_SW_WRITE_OFTEN,&dst_vaddr);
+
+                //PRINT_TIME_START
+                if(dso == NULL)
+                    dso = dlopen(RK_XXX_PATH, RTLD_NOW | RTLD_LOCAL);
+
+                if (dso == 0) {
+                    ALOGE("rk_debug can't not find /system/lib64/librockchipxxx.so ! error=%s \n",
+                        dlerror());
+                    return BAD_VALUE;
+                }
+#if RK_HDR
+                if(rockchipxxx == NULL)
+                    rockchipxxx = (__rockchipxxx)dlsym(dso, "_Z11rockchipxxxPhS_iiiii");
+                if(rockchipxxx == NULL)
+                {
+                    ALOGE("rk_debug can't not find target function in /system/lib64/librockchipxxx.so ! \n");
+                    dlclose(dso);
+                    return BAD_VALUE;
+                }
+                /* align w to 64 */
+                w = ALIGN(w, 64);
+                ALOGD("DEBUG_lb Stride=%d",yuvTeximg[yuvIndex].yuvTexBuffer->getStride());
+                if(w <= yuvTeximg[yuvIndex].yuvTexBuffer->getStride()/2)
+                {
+                    rockchipxxx((u8*)src_vaddr, (u8*)dst_vaddr, w, yuvTeximg[yuvIndex].yuvTexBuffer->getHeight(), src_stride, yuvTeximg[yuvIndex].yuvTexBuffer->getStride(), 0);
+                }else
+                    ALOGE("%s(%d):unsupport resolution for 4k", __FUNCTION__, __LINE__);
+#elif RK_NV12_10_TO_NV12_BY_NENO
+                if(rockchipxxx3288 == NULL)
+                    rockchipxxx3288 = (__rockchipxxx3288)dlsym(dso, "_Z15rockchipxxx3288PhS_iiiii");
+                if(rockchipxxx3288 == NULL)
+                {
+                    ALOGE("rk_debug can't not find target function in /system/lib64/librockchipxxx.so ! \n");
+                    dlclose(dso);
+                    return BAD_VALUE;
+                }
+                rockchipxxx3288((u8*)src_vaddr, (u8*)dst_vaddr, w, yuvTeximg[yuvIndex].yuvTexBuffer->getHeight(), src_stride, (src_r - src_l), 0);
+#endif
+                //PRINT_TIME_END("convert10to16_highbit_arm64_neon")
+                ALOGD("src_vaddr=%p,dst_vaddr=%p,crop_w=%d,crop_h=%d,stride=%f, src_stride=%d,raw_w=%d,raw_h=%d",
+                        src_vaddr, dst_vaddr, src_r - src_l,src_b - src_t,
+                        (src_r - src_l)*1.25+64,src_stride,gBuf->getWidth(),gBuf->getHeight());
+                //dump data
+                static int i =0;
+                char pro_value[PROPERTY_VALUE_MAX];
+
+                property_get("sys.dump_out_neon",pro_value,0);
+                if(i<10 && !strcmp(pro_value,"true"))
+                {
+                    char data_name[100];
+
+                    sprintf(data_name,"/data/dump/dmlayer%d_%d_%d.bin", i,
+                            yuvTeximg[yuvIndex].yuvTexBuffer->getWidth(),yuvTeximg[yuvIndex].yuvTexBuffer->getHeight());
+#if RK_HDR
+                    int n = yuvTeximg[yuvIndex].yuvTexBuffer->getHeight() * yuvTeximg[yuvIndex].yuvTexBuffer->getStride();
+#else
+                    int n = yuvTeximg[yuvIndex].yuvTexBuffer->getHeight() * yuvTeximg[yuvIndex].yuvTexBuffer->getStride() * 1.5;
+#endif
+                    ALOGD("dump %s size=%d", data_name, n );
+                    FILE *fp;
+                    if ((fp = fopen(data_name, "w+")) == NULL)
+                    {
+                        printf("can't open output.bin!!!!!\n");
+                    }
+                    fwrite(dst_vaddr, n, 1, fp);
+                    fclose(fp);
+                    i++;
+                }
+
+#elif RK_NV12_10_TO_NV12_BY_RGA
+                rgaCopyBit(gBuf, yuvTeximg[yuvIndex].yuvTexBuffer, CurrentCrop);
+#endif
+            bindExternalTextureBuffer(layer->source.buffer.textureName,
+                            yuvTeximg[yuvIndex].yuvTexBuffer, layer->source.buffer.fence);
+
+        }
+        else
+#endif
+        {
+            bindExternalTextureBuffer(layer->source.buffer.textureName, gBuf, layer->source.buffer.fence);
+        }
 
             usePremultipliedAlpha = layer->source.buffer.usePremultipliedAlpha;
             Texture texture(Texture::TEXTURE_EXTERNAL, layer->source.buffer.textureName);
-            mat4 texMatrix = layer->source.buffer.textureTransform;
+            mat4 texMatrix;
+            texMatrix = layer->source.buffer.textureTransform;
+            if(gBuf != NULL && gBuf->getPixelFormat() == HAL_PIXEL_FORMAT_YCrCb_NV12_10 )
+            {
+                mat4 unit;
+                texMatrix = unit;
+            }
 
             texture.setMatrix(texMatrix.asArray());
             texture.setFiltering(layer->source.buffer.useTextureFiltering);
diff --git a/libs/renderengine/include/renderengine/LayerSettings.h b/libs/renderengine/include/renderengine/LayerSettings.h
index 95e9367fe..1adf68eb8 100644
--- a/libs/renderengine/include/renderengine/LayerSettings.h
+++ b/libs/renderengine/include/renderengine/LayerSettings.h
@@ -46,6 +46,9 @@ struct Buffer {
     // TODO(alecmouri): This is GL-specific...make the type backend-agnostic.
     uint32_t textureName = 0;
 
+    //rk_ext: add currentcrop for 10bit to 8bit
+    Rect currentcrop;
+
     // Whether to use filtering when rendering the texture.
     bool useTextureFiltering = false;
 
diff --git a/services/surfaceflinger/Android.bp b/services/surfaceflinger/Android.bp
index a9f9c8257..2c23733e3 100755
--- a/services/surfaceflinger/Android.bp
+++ b/services/surfaceflinger/Android.bp
@@ -58,6 +58,7 @@ cc_defaults {
         "libutils",
         "libSurfaceFlingerProp",
         "libgraphicpolicy",
+        "librga",
     ],
     // VrComposer is not used when building surfaceflinger for vendors
     target: {
diff --git a/services/surfaceflinger/BufferLayer.cpp b/services/surfaceflinger/BufferLayer.cpp
index f0b0200bc..8787232a2 100644
--- a/services/surfaceflinger/BufferLayer.cpp
+++ b/services/surfaceflinger/BufferLayer.cpp
@@ -261,6 +261,8 @@ std::optional<compositionengine::LayerFE::LayerSettings> BufferLayer::prepareCli
             mat4::translate(vec4(-.5, -.5, 0, 1)) *
             mat4::translate(vec4(translateX, translateY, 0, 1)) *
             mat4::scale(vec4(scaleWidth, scaleHeight, 1.0, 1.0));
+    //rk_ext: Deliver to GLESRenderEngine for 10bit to 8bit
+    layer.source.buffer.currentcrop = mBufferInfo.mCrop;
 
     layer.source.buffer.useTextureFiltering = useFiltering;
     layer.source.buffer.textureTransform = mat4(static_cast<const float*>(textureMatrix)) * tr;
-- 
2.36.0

