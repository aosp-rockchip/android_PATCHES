From bfabbd70dbaa70df54734da6d983239c4f26913e Mon Sep 17 00:00:00 2001
From: "shine.liu" <shine.liu@rock-chips.com>
Date: Fri, 18 Sep 2020 17:59:08 +0800
Subject: [PATCH 10/25] [MediaPlayerFactory]: use rockit default and change to
 nuplayer for some audio cases

Signed-off-by: shine.liu <shine.liu@rock-chips.com>
Change-Id: Idfdbe64f81fb9acc8a1e711d1d010ff3e30bd857
---
 .../MediaPlayerFactory.cpp                    | 73 ++++++++++++++++++-
 1 file changed, 69 insertions(+), 4 deletions(-)

diff --git a/media/libmediaplayerservice/MediaPlayerFactory.cpp b/media/libmediaplayerservice/MediaPlayerFactory.cpp
index 252f3527c2..08edf393b0 100644
--- a/media/libmediaplayerservice/MediaPlayerFactory.cpp
+++ b/media/libmediaplayerservice/MediaPlayerFactory.cpp
@@ -39,6 +39,26 @@ Mutex MediaPlayerFactory::sLock;
 MediaPlayerFactory::tFactoryMap MediaPlayerFactory::sFactoryMap;
 bool MediaPlayerFactory::sInitComplete = false;
 
+static status_t getFileName(int fd,String8 *FilePath) {
+    static ssize_t link_dest_size;
+    static char link_dest[PATH_MAX];
+    const char *ptr = NULL;
+    String8 path;
+    path.appendFormat("/proc/%d/fd/%d", getpid(), fd);
+
+    if ((link_dest_size = readlink(path.string(), link_dest, sizeof(link_dest)-1)) < 0) {
+        return errno;
+    } else {
+        link_dest[link_dest_size] = '\0';
+    }
+
+    path = link_dest;
+    ptr = path.string();
+    *FilePath = String8(ptr);
+
+    return OK;
+}
+
 status_t MediaPlayerFactory::registerFactory_l(IFactory* factory,
                                                player_type type) {
     if (NULL == factory) {
@@ -63,8 +83,17 @@ status_t MediaPlayerFactory::registerFactory_l(IFactory* factory,
 }
 
 static player_type getDefaultPlayerType() {
+    char value[PROPERTY_VALUE_MAX];
+    if (property_get("cts_gts.status", value, NULL)
+        && !strcasecmp("true", value)){
+        return NU_PLAYER;
+    }
+
+    if (property_get("use_nuplayer", value, NULL)
+        && !strcasecmp("true", value)) {
+        return NU_PLAYER;
+    }
     return ROCKIT_PLAYER;
-    //return NU_PLAYER;
 }
 
 status_t MediaPlayerFactory::registerFactory(IFactory* factory,
@@ -104,6 +133,10 @@ void MediaPlayerFactory::unregisterFactory(player_type type) {
 
 player_type MediaPlayerFactory::getPlayerType(const sp<IMediaPlayer>& client,
                                               const char* url) {
+    if (strstr(url,".ogg")
+        || strstr(url,".apk")) {
+        return NU_PLAYER;
+    }
     GET_PLAYER_TYPE_IMPL(client, url);
 }
 
@@ -111,6 +144,18 @@ player_type MediaPlayerFactory::getPlayerType(const sp<IMediaPlayer>& client,
                                               int fd,
                                               int64_t offset,
                                               int64_t length) {
+    String8 filePath;
+    getFileName(fd,&filePath);
+    if (strstr(filePath.string(), ".ogg")
+        || strstr(filePath.string(), ".mid")
+        || strstr(filePath.string(), ".mp3")
+        || strstr(filePath.string(), ".apk")
+        || strstr(filePath.string(), "notification_sound_cache")
+        || strstr(filePath.string(), "ringtone_cache")
+        || strstr(filePath.string(), "alarm_alert_cache")) {
+        return NU_PLAYER;
+    }
+
     GET_PLAYER_TYPE_IMPL(client, fd, offset, length);
 }
 
@@ -246,13 +291,33 @@ class RockitPlayerFactory : public MediaPlayerFactory::IFactory {
     virtual float scoreFactory(const sp<IMediaPlayer>& /*client*/,
                                const char* url,
                                float curScore) {
-        (void)url;
-        static const float kOurScore = 0.0;
+        static const float kOurScore = 0.9;
 
         if (kOurScore <= curScore)
             return 0.0;
 
-        return kOurScore;
+        if (!strncasecmp("http://", url, 7)
+            || !strncasecmp("https://", url, 8)
+            || !strncasecmp("file://", url, 7)) {
+            char value[PROPERTY_VALUE_MAX];
+            if (property_get("cts_gts.status", value, NULL)
+                && !strcasecmp("true", value)){
+                    return 0.0;
+            }
+
+            if (property_get("use_nuplayer", value, NULL)
+                && !strcasecmp("true", value)) {
+                    return 0.0;
+            }
+
+            return kOurScore;
+        }
+
+        if (!strncasecmp("rtsp://", url, 7)) {
+            return kOurScore;
+        }
+
+        return 0.0;
     }
 
     virtual float scoreFactory(const sp<IMediaPlayer>& /*client*/,
-- 
2.36.0

