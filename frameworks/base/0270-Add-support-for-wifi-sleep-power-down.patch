From 6e30faafe805a4e37b71d31d7cf5048b4b823bbd Mon Sep 17 00:00:00 2001
From: Alex Zhao <zzc@rock-chips.com>
Date: Thu, 17 Dec 2020 14:18:34 +0800
Subject: [PATCH 270/297] Add support for wifi sleep power down

Signed-off-by: Alex Zhao <zzc@rock-chips.com>
Change-Id: Ic69fc4e476b3301ab32750752780df5e1532b99c
---
 .../android/server/ConnectivityService.java   | 68 +++++++++++++++++++
 1 file changed, 68 insertions(+)

diff --git a/services/core/java/com/android/server/ConnectivityService.java b/services/core/java/com/android/server/ConnectivityService.java
index 77cd5d2ffda..ad23f6f46d3 100644
--- a/services/core/java/com/android/server/ConnectivityService.java
+++ b/services/core/java/com/android/server/ConnectivityService.java
@@ -57,6 +57,8 @@ import static android.os.Process.INVALID_UID;
 import static android.system.OsConstants.IPPROTO_TCP;
 import static android.system.OsConstants.IPPROTO_UDP;
 
+import android.net.wifi.WifiManager;
+
 import static java.util.Map.Entry;
 
 import android.Manifest;
@@ -596,6 +598,13 @@ public class ConnectivityService extends IConnectivityManager.Stub
     private final DnsManager mDnsManager;
     private final NetworkRanker mNetworkRanker;
 
+    static final int WIFI_DISABLED = 0;
+    static final int WIFI_ENABLED = 1;
+    private boolean mWifiNeedToOpen = false;
+    private PowerManager.WakeLock mWifiWakeLock;
+    private WifiManager mWifiManager;
+    private DataReceiver mDataReceiver = new DataReceiver();
+
     private boolean mSystemReady;
     private Intent mInitialBroadcast;
 
@@ -1166,6 +1175,65 @@ public class ConnectivityService extends IConnectivityManager.Stub
 
         mDnsManager = new DnsManager(mContext, mDnsResolver, mSystemProperties);
         registerPrivateDnsSettingsCallbacks();
+
+	boolean mWifiSleepConfig = SystemProperties.getBoolean("ro.wifi.sleep.power.down", false);
+	if(mWifiSleepConfig) {
+		PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
+		mWifiWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "WifiSleepPowerDown");
+		mWifiManager = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE);
+		IntentFilter filter = new IntentFilter();
+		filter.addAction(Intent.ACTION_SCREEN_ON);
+		filter.addAction(Intent.ACTION_SCREEN_OFF);
+		mContext.registerReceiver(mDataReceiver, filter);
+	}
+    }
+
+    private class DataReceiver extends BroadcastReceiver {
+	@Override
+	public void onReceive(Context context, Intent intent) {
+		String action = intent.getAction();
+		log("onReceive, action=" + action);
+		log("mWifiNeedToOpen =" + mWifiNeedToOpen);
+		if (action.equals(Intent.ACTION_SCREEN_ON)) {
+			if(mWifiNeedToOpen) {
+				setWifiEnabled(true);
+			}
+		} else if (action.equals(Intent.ACTION_SCREEN_OFF)) {
+			if(getWifiState() == WIFI_ENABLED) {
+				mWifiNeedToOpen = true;
+				setWifiEnabled(false);
+			} else {
+				mWifiNeedToOpen = false;
+			}
+		}
+	}
+    }
+
+    private int getWifiState() {
+	final ContentResolver cr = mContext.getContentResolver();
+	try {
+		return Settings.Global.getInt(cr, Settings.Global.WIFI_ON);
+	} catch (Settings.SettingNotFoundException e) {
+		Settings.Global.putInt(cr, Settings.Global.WIFI_ON, WIFI_DISABLED);
+		return WIFI_DISABLED;
+	}
+    }
+
+    private void setWifiEnabled(boolean enable) {
+	log("setWifiEnabled " + enable);
+	if (!mWifiWakeLock.isHeld()) {
+		log("---- mWifiWakeLock.acquire ----");
+		mWifiWakeLock.acquire();
+	}
+	mWifiManager.setWifiEnabled(enable);
+	if (mWifiWakeLock.isHeld()) {
+		try {
+			Thread.sleep(2000);
+		} catch (InterruptedException ignore) {
+		}
+		log("---- mWifiWakeLock.release ----");
+		mWifiWakeLock.release();
+	}
     }
 
     private static NetworkCapabilities createDefaultNetworkCapabilitiesForUid(int uid) {
-- 
2.36.0

