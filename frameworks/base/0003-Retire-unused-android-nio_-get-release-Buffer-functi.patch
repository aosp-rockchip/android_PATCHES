From bf92e74a259b8c080a5b5829cea5a7c385357749 Mon Sep 17 00:00:00 2001
From: Orion Hodson <oth@google.com>
Date: Mon, 15 Apr 2019 22:13:59 +0100
Subject: [PATCH 003/297] Retire unused android::nio_{get,release}Buffer
 functions

Removes unused functions nio_getBuffer and
nio_releaseBuffer. Motivated by the observation that nio_releaseBuffer()
is not sound for java.nio.Buffer instances backed by heap arrays when
the buffer position is non-zero.

Adds doc comments to AutoBufferPointer that is used in the framework.

Bug: b/130390512
Test: m -j100
Change-Id: I01fb72ed71d46a4ef8c7d3da82319ea57e391dbd
(cherry picked from commit bd1e15613db24406c322f8890ab7fcff449d417c)
---
 core/jni/android_nio_utils.cpp | 18 +++------
 core/jni/android_nio_utils.h   | 67 ++++++++++++++++++----------------
 2 files changed, 40 insertions(+), 45 deletions(-)

diff --git a/core/jni/android_nio_utils.cpp b/core/jni/android_nio_utils.cpp
index a62dd7c4048..ee6f26c4bf1 100644
--- a/core/jni/android_nio_utils.cpp
+++ b/core/jni/android_nio_utils.cpp
@@ -21,7 +21,6 @@
 namespace {
 
 void* getPointer(JNIEnv *_env, jobject buffer, jarray *array, void** elements) {
-    assert(array);
     jint position;
     jint limit;
     jint elementSizeShift;
@@ -44,25 +43,18 @@ void releasePointer(JNIEnv *_env, jarray array, void *elements, jboolean commit)
 
 }  // namespace
 
-void* android::nio_getPointer(JNIEnv *_env, jobject buffer, jarray *array) {
-    void* elements;
-    return getPointer(_env, buffer, array, &elements);
-}
-
-void android::nio_releasePointer(JNIEnv *_env, jarray array, void *data, jboolean commit) {
-    releasePointer(_env, array, data, commit);
-}
+namespace android {
 
-///////////////////////////////////////////////////////////////////////////////
-
-android::AutoBufferPointer::AutoBufferPointer(JNIEnv* env, jobject nioBuffer, jboolean commit) {
+AutoBufferPointer::AutoBufferPointer(JNIEnv* env, jobject nioBuffer, jboolean commit) {
     fEnv = env;
     fCommit = commit;
     fPointer = getPointer(env, nioBuffer, &fArray, &fElements);
 }
 
-android::AutoBufferPointer::~AutoBufferPointer() {
+AutoBufferPointer::~AutoBufferPointer() {
     if (nullptr != fArray) {
         releasePointer(fEnv, fArray, fElements, fCommit);
     }
 }
+
+}  // namespace android
diff --git a/core/jni/android_nio_utils.h b/core/jni/android_nio_utils.h
index 7c9acd2638d..586e6db58cd 100644
--- a/core/jni/android_nio_utils.h
+++ b/core/jni/android_nio_utils.h
@@ -22,51 +22,54 @@
 namespace android {
 
 /**
- * Given an nio.Buffer, return a pointer to it, beginning at its current
- * position. The returned pointer is only valid for the current JNI stack-frame.
- * For performance, it does not create any global references, so the getPointer
- * (and releasePointer if array is returned non-null) must be done in the
- * same JNI stack-frame.
+ * Class providing scoped access to the memory backing a java.nio.Buffer instance.
  *
- * @param env   The current JNI env
- * @param buffer    The nio.Buffer object
- * @param array     REQUIRED. Output. If on return it is set to non-null, then
- *                  nio_releasePointer must be called with the array
- *                  and the returned pointer when the caller is through with it.
- *                  If on return it is set to null, do not call
- *                  nio_releasePointer.
- * @return The pointer to the memory in the buffer object
- */
-void* nio_getPointer(JNIEnv *env, jobject buffer, jarray *array);
-
-/**
- * Call this if android_nio_getPointer returned non-null in its array parameter.
- * Pass that array and the returned pointer when you are done accessing the
- * pointer. If called (i.e. array is non-null), it must be called in the same
- * JNI stack-frame as getPointer
+ * Instances of this class should only be allocated on the stack as heap allocation is not
+ * supported.
  *
- * @param env   The current JNI env
- * @param buffer    The array returned from android_nio_getPointer (!= null)
- * @param pointer   The pointer returned by android_nio_getPointer
- * @param commit    JNI_FALSE if the pointer was just read, and JNI_TRUE if
- *                  the pointer was written to.
+ * Instances of this class do not create any global references for performance reasons.
  */
-void nio_releasePointer(JNIEnv *env, jarray array, void *pointer,
-                                jboolean commit);
-
-class AutoBufferPointer {
+class AutoBufferPointer final {
 public:
+    /** Constructor for an AutoBufferPointer instance.
+     *
+     * @param env          The current JNI env
+     * @param nioBuffer    Instance of a java.nio.Buffer whose memory will be accessed.
+     * @param commit       JNI_TRUE if the underlying memory will be updated and should be
+     *                     copied back to the managed heap. JNI_FALSE if the data will
+     *                     not be modified or the modifications may be discarded.
+     *
+     * The commit parameter is only applicable if the buffer is backed by a managed heap
+     * array and the runtime had to provide a copy of the data rather than the original data.
+     */
     AutoBufferPointer(JNIEnv* env, jobject nioBuffer, jboolean commit);
+
     ~AutoBufferPointer();
 
+    /**
+     * Returns a pointer to the current position of the buffer provided to the constructor.  This
+     * pointer is only valid whilst the AutoBufferPointer instance remains in scope.
+     */
     void* pointer() const { return fPointer; }
 
 private:
     JNIEnv* fEnv;
-    void*   fPointer;   // pointer to current buffer position.
-    void*   fElements;  // pointer to array element 0 (may be directly in fArray or a copy).
+    void*   fPointer;   // pointer to current buffer position when constructed.
+    void*   fElements;  // pointer to array element 0 (null if buffer is direct, may be within fArray
+                        // or point to a copy of the array).
     jarray  fArray;     // pointer to array on managed heap.
     jboolean fCommit;   // commit data to source if required (when fElements is a copy of fArray).
+
+    // Unsupported constructors and operators.
+    AutoBufferPointer() = delete;
+    AutoBufferPointer(AutoBufferPointer&) = delete;
+    AutoBufferPointer& operator=(AutoBufferPointer&) = delete;
+    static void* operator new(std::size_t);
+    static void* operator new[](std::size_t);
+    static void* operator new(std::size_t, void*);
+    static void* operator new[](std::size_t, void*);
+    static void operator delete(void*, std::size_t);
+    static void operator delete[](void*, std::size_t);
 };
 
 }   /* namespace android */
-- 
2.36.0

