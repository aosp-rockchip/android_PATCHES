From db5526393b44ee4e845cb61f7e11cb271dbf06a4 Mon Sep 17 00:00:00 2001
From: Tiger Huang <tigerhuang@google.com>
Date: Tue, 31 Mar 2020 18:22:05 +0800
Subject: [PATCH 137/297] Update insets state for each window if its mBehindIme
 is changed

InsetsStateController would dispatch a different insets state to a
window accroding to its condition. For example, a window behind IME
can get the insets state different from one got from a window above
IME. So when the conditions change, we should update the insets state
to the client.

Fix: 152839133
Test: atest InsetsStateControllerTest
Change-Id: I7a846d55da92a652d79fb81dfd79abcc87971830
(cherry picked from commit 53c8eb8ae0689fbe300d0e5f470f6f7247006d6c)
---
 .../com/android/server/wm/DisplayContent.java |  8 +++-
 .../server/wm/InsetsStateController.java      |  9 ++++
 .../server/wm/InsetsStateControllerTest.java  | 43 +++++++++++++++++++
 3 files changed, 59 insertions(+), 1 deletion(-)

diff --git a/services/core/java/com/android/server/wm/DisplayContent.java b/services/core/java/com/android/server/wm/DisplayContent.java
index 01081404a50..ce7e79714c3 100644
--- a/services/core/java/com/android/server/wm/DisplayContent.java
+++ b/services/core/java/com/android/server/wm/DisplayContent.java
@@ -503,6 +503,9 @@ class DisplayContent extends WindowContainer<DisplayContent.DisplayChildWindowCo
     /** Windows removed since {@link #mCurrentFocus} was set to null. Used for ANR blaming. */
     final ArrayList<WindowState> mWinRemovedSinceNullFocus = new ArrayList<>();
 
+    /** Windows whose client's insets states are not up-to-date. */
+    final ArrayList<WindowState> mWinInsetsChanged = new ArrayList<>();
+
     private ScreenRotationAnimation mScreenRotationAnimation;
 
     /**
@@ -708,7 +711,10 @@ class DisplayContent extends WindowContainer<DisplayContent.DisplayChildWindowCo
         }
 
         // Sets mBehindIme for each window. Windows behind IME can get IME insets.
-        w.mBehindIme = mTmpWindowsBehindIme;
+        if (w.mBehindIme != mTmpWindowsBehindIme) {
+            w.mBehindIme = mTmpWindowsBehindIme;
+            mWinInsetsChanged.add(w);
+        }
         if (w == mInputMethodWindow) {
             mTmpWindowsBehindIme = true;
         }
diff --git a/services/core/java/com/android/server/wm/InsetsStateController.java b/services/core/java/com/android/server/wm/InsetsStateController.java
index 04454a5b33e..ba14d48d38e 100644
--- a/services/core/java/com/android/server/wm/InsetsStateController.java
+++ b/services/core/java/com/android/server/wm/InsetsStateController.java
@@ -227,10 +227,19 @@ class InsetsStateController {
         for (int i = mProviders.size() - 1; i >= 0; i--) {
             mProviders.valueAt(i).onPostLayout();
         }
+        final ArrayList<WindowState> winInsetsChanged = mDisplayContent.mWinInsetsChanged;
         if (!mLastState.equals(mState)) {
             mLastState.set(mState, true /* copySources */);
             notifyInsetsChanged();
+        } else {
+            // The global insets state has not changed but there might be windows whose conditions
+            // (e.g., z-order) have changed. They can affect the insets states that we dispatch to
+            // the clients.
+            for (int i = winInsetsChanged.size() - 1; i >= 0; i--) {
+                winInsetsChanged.get(i).notifyInsetsChanged();
+            }
         }
+        winInsetsChanged.clear();
     }
 
     void onInsetsModified(InsetsControlTarget windowState, InsetsState state) {
diff --git a/services/tests/wmtests/src/com/android/server/wm/InsetsStateControllerTest.java b/services/tests/wmtests/src/com/android/server/wm/InsetsStateControllerTest.java
index db7bce4c875..17ebe4f6737 100644
--- a/services/tests/wmtests/src/com/android/server/wm/InsetsStateControllerTest.java
+++ b/services/tests/wmtests/src/com/android/server/wm/InsetsStateControllerTest.java
@@ -32,6 +32,10 @@ import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
+import static org.mockito.Mockito.atLeast;
+import static org.mockito.Mockito.clearInvocations;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
 
 import android.graphics.Rect;
 import android.platform.test.annotations.Presubmit;
@@ -168,6 +172,45 @@ public class InsetsStateControllerTest extends WindowTestsBase {
         assertNull(getController().getInsetsForDispatch(app).peekSource(ITYPE_IME));
     }
 
+    @Test
+    public void testStripForDispatch_imeOrderChanged() {
+        getController().getSourceProvider(ITYPE_IME).setWindow(mImeWindow, null, null);
+
+        // This window can be the IME target while app cannot be the IME target.
+        createWindow(null, TYPE_APPLICATION, "base");
+
+        // Send our spy window (app) into the system so that we can detect the invocation.
+        final WindowState win = createWindow(null, TYPE_APPLICATION, "app");
+        final WindowToken parent = win.mToken;
+        parent.removeChild(win);
+        final WindowState app = spy(win);
+        parent.addWindow(app);
+
+        // Adding FLAG_NOT_FOCUSABLE makes app above IME.
+        app.mAttrs.flags |= FLAG_NOT_FOCUSABLE;
+        mDisplayContent.computeImeTarget(true);
+        mDisplayContent.setLayoutNeeded();
+        mDisplayContent.applySurfaceChangesTransaction();
+
+        // app won't get IME insets while above IME.
+        assertNull(getController().getInsetsForDispatch(app).peekSource(ITYPE_IME));
+
+        // Reset invocation counter.
+        clearInvocations(app);
+
+        // Removing FLAG_NOT_FOCUSABLE makes app below IME.
+        app.mAttrs.flags &= ~FLAG_NOT_FOCUSABLE;
+        mDisplayContent.computeImeTarget(true);
+        mDisplayContent.setLayoutNeeded();
+        mDisplayContent.applySurfaceChangesTransaction();
+
+        // Make sure app got notified.
+        verify(app, atLeast(1)).notifyInsetsChanged();
+
+        // app will get IME insets while below IME.
+        assertNotNull(getController().getInsetsForDispatch(app).peekSource(ITYPE_IME));
+    }
+
     @Test
     public void testStripForDispatch_childWindow_altFocusable() {
         final WindowState app = createWindow(null, TYPE_APPLICATION, "app");
-- 
2.36.0

