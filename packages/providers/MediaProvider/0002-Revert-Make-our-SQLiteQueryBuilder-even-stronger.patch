From 9e9288d51b2a10eeb327b57daa45a318d665ed9e Mon Sep 17 00:00:00 2001
From: Daniel Chapin <chapin@google.com>
Date: Wed, 18 Dec 2019 18:37:25 +0000
Subject: [PATCH 02/26] Revert "Make our SQLiteQueryBuilder even stronger."

This reverts commit cbdea0ff453719f328aae2ccc931647211eeb277.

Reason for revert: b/146482076

Change-Id: Iac7509ab81cc99484b20397f9f5e7c6333c05b1d
(cherry picked from commit 049dbf429f4a331b12db2ccb1e6998d1656541a6)
---
 .../providers/media/MediaProvider.java        | 121 ++++++++----------
 1 file changed, 53 insertions(+), 68 deletions(-)

diff --git a/src/com/android/providers/media/MediaProvider.java b/src/com/android/providers/media/MediaProvider.java
index 84fedc52..5edc7653 100644
--- a/src/com/android/providers/media/MediaProvider.java
+++ b/src/com/android/providers/media/MediaProvider.java
@@ -2835,8 +2835,6 @@ public class MediaProvider extends ContentProvider {
         }
         qb.setProjectionAggregationAllowed(true);
         qb.setStrict(true);
-        qb.setStrictColumns(true);
-        qb.setStrictGrammar(true);
 
         final String callingPackage = getCallingPackageOrSelf();
 
@@ -2873,15 +2871,12 @@ public class MediaProvider extends ContentProvider {
                 matchPending = MATCH_INCLUDE;
                 matchTrashed = MATCH_INCLUDE;
                 // fall-through
-            case IMAGES_MEDIA: {
+            case IMAGES_MEDIA:
                 if (type == TYPE_QUERY) {
                     qb.setTables("images");
-                    qb.setProjectionMap(
-                            getProjectionMap(Images.Media.class));
+                    qb.setProjectionMap(getProjectionMap(Images.Media.class));
                 } else {
                     qb.setTables("files");
-                    qb.setProjectionMap(
-                            getProjectionMap(Images.Media.class, Files.FileColumns.class));
                     appendWhereStandalone(qb, FileColumns.MEDIA_TYPE + "=?",
                             FileColumns.MEDIA_TYPE_IMAGE);
                 }
@@ -2901,7 +2896,7 @@ public class MediaProvider extends ContentProvider {
                     appendWhereStandalone(qb, FileColumns.VOLUME_NAME + " IN " + includeVolumes);
                 }
                 break;
-            }
+
             case IMAGES_THUMBNAILS_ID:
                 appendWhereStandalone(qb, "_id=?", uri.getPathSegments().get(3));
                 // fall-through
@@ -2921,20 +2916,18 @@ public class MediaProvider extends ContentProvider {
                 }
                 break;
             }
+
             case AUDIO_MEDIA_ID:
                 appendWhereStandalone(qb, "_id=?", uri.getPathSegments().get(3));
                 matchPending = MATCH_INCLUDE;
                 matchTrashed = MATCH_INCLUDE;
                 // fall-through
-            case AUDIO_MEDIA: {
+            case AUDIO_MEDIA:
                 if (type == TYPE_QUERY) {
                     qb.setTables("audio");
-                    qb.setProjectionMap(
-                            getProjectionMap(Audio.Media.class));
+                    qb.setProjectionMap(getProjectionMap(Audio.Media.class));
                 } else {
                     qb.setTables("files");
-                    qb.setProjectionMap(
-                            getProjectionMap(Audio.Media.class, Files.FileColumns.class));
                     appendWhereStandalone(qb, FileColumns.MEDIA_TYPE + "=?",
                             FileColumns.MEDIA_TYPE_AUDIO);
                 }
@@ -2959,11 +2952,11 @@ public class MediaProvider extends ContentProvider {
                     appendWhereStandalone(qb, FileColumns.VOLUME_NAME + " IN " + includeVolumes);
                 }
                 break;
-            }
+
             case AUDIO_MEDIA_ID_GENRES_ID:
                 appendWhereStandalone(qb, "_id=?", uri.getPathSegments().get(5));
                 // fall-through
-            case AUDIO_MEDIA_ID_GENRES: {
+            case AUDIO_MEDIA_ID_GENRES:
                 if (type == TYPE_QUERY) {
                     qb.setTables("audio_genres");
                     qb.setProjectionMap(getProjectionMap(Audio.Genres.class));
@@ -2978,11 +2971,11 @@ public class MediaProvider extends ContentProvider {
                     appendWhereStandalone(qb, "0");
                 }
                 break;
-            }
+
             case AUDIO_MEDIA_ID_PLAYLISTS_ID:
                 appendWhereStandalone(qb, "_id=?", uri.getPathSegments().get(5));
                 // fall-through
-            case AUDIO_MEDIA_ID_PLAYLISTS: {
+            case AUDIO_MEDIA_ID_PLAYLISTS:
                 qb.setTables("audio_playlists");
                 qb.setProjectionMap(getProjectionMap(Audio.Playlists.class));
                 appendWhereStandalone(qb, "_id IN (SELECT playlist_id FROM " +
@@ -2993,11 +2986,11 @@ public class MediaProvider extends ContentProvider {
                     appendWhereStandalone(qb, "0");
                 }
                 break;
-            }
+
             case AUDIO_GENRES_ID:
                 appendWhereStandalone(qb, "_id=?", uri.getPathSegments().get(3));
                 // fall-through
-            case AUDIO_GENRES: {
+            case AUDIO_GENRES:
                 qb.setTables("audio_genres");
                 qb.setProjectionMap(getProjectionMap(Audio.Genres.class));
                 if (!allowGlobal && !checkCallingPermissionAudio(false, callingPackage)) {
@@ -3006,11 +2999,11 @@ public class MediaProvider extends ContentProvider {
                     appendWhereStandalone(qb, "0");
                 }
                 break;
-            }
+
             case AUDIO_GENRES_ID_MEMBERS:
                 appendWhereStandalone(qb, "genre_id=?", uri.getPathSegments().get(3));
                 // fall-through
-            case AUDIO_GENRES_ALL_MEMBERS: {
+            case AUDIO_GENRES_ALL_MEMBERS:
                 if (type == TYPE_QUERY) {
                     qb.setTables("audio");
 
@@ -3022,28 +3015,24 @@ public class MediaProvider extends ContentProvider {
                 } else {
                     throw new UnsupportedOperationException("Genres cannot be directly modified");
                 }
-
                 if (!allowGlobal && !checkCallingPermissionAudio(false, callingPackage)) {
                     // We don't have a great way to filter parsed metadata by
                     // owner, so callers need to hold READ_MEDIA_AUDIO
                     appendWhereStandalone(qb, "0");
                 }
                 break;
-            }
+
             case AUDIO_PLAYLISTS_ID:
                 appendWhereStandalone(qb, "_id=?", uri.getPathSegments().get(3));
                 matchPending = MATCH_INCLUDE;
                 matchTrashed = MATCH_INCLUDE;
                 // fall-through
-            case AUDIO_PLAYLISTS: {
+            case AUDIO_PLAYLISTS:
                 if (type == TYPE_QUERY) {
                     qb.setTables("audio_playlists");
-                    qb.setProjectionMap(
-                            getProjectionMap(Audio.Playlists.class));
+                    qb.setProjectionMap(getProjectionMap(Audio.Playlists.class));
                 } else {
                     qb.setTables("files");
-                    qb.setProjectionMap(
-                            getProjectionMap(Audio.Playlists.class, Files.FileColumns.class));
                     appendWhereStandalone(qb, FileColumns.MEDIA_TYPE + "=?",
                             FileColumns.MEDIA_TYPE_PLAYLIST);
                 }
@@ -3063,7 +3052,7 @@ public class MediaProvider extends ContentProvider {
                     appendWhereStandalone(qb, FileColumns.VOLUME_NAME + " IN " + includeVolumes);
                 }
                 break;
-            }
+
             case AUDIO_PLAYLISTS_ID_MEMBERS_ID:
                 appendWhereStandalone(qb, "audio_playlists_map._id=?",
                         uri.getPathSegments().get(5));
@@ -3082,7 +3071,6 @@ public class MediaProvider extends ContentProvider {
                     appendWhereStandalone(qb, "audio._id = audio_id");
                 } else {
                     qb.setTables("audio_playlists_map");
-                    qb.setProjectionMap(getProjectionMap(Audio.Playlists.Members.class));
                 }
                 if (!allowGlobal && !checkCallingPermissionAudio(false, callingPackage)) {
                     // We don't have a great way to filter parsed metadata by
@@ -3091,6 +3079,7 @@ public class MediaProvider extends ContentProvider {
                 }
                 break;
             }
+
             case AUDIO_ALBUMART_ID:
                 appendWhereStandalone(qb, "album_id=?", uri.getPathSegments().get(3));
                 // fall-through
@@ -3127,10 +3116,11 @@ public class MediaProvider extends ContentProvider {
                 }
                 break;
             }
+
             case AUDIO_ARTISTS_ID:
                 appendWhereStandalone(qb, "_id=?", uri.getPathSegments().get(3));
                 // fall-through
-            case AUDIO_ARTISTS: {
+            case AUDIO_ARTISTS:
                 if (type == TYPE_QUERY) {
                     qb.setTables("audio_artists");
                     qb.setProjectionMap(getProjectionMap(Audio.Artists.class));
@@ -3143,7 +3133,7 @@ public class MediaProvider extends ContentProvider {
                     appendWhereStandalone(qb, "0");
                 }
                 break;
-            }
+
             case AUDIO_ALBUMS_ID:
                 appendWhereStandalone(qb, "_id=?", uri.getPathSegments().get(3));
                 // fall-through
@@ -3161,20 +3151,18 @@ public class MediaProvider extends ContentProvider {
                 }
                 break;
             }
+
             case VIDEO_MEDIA_ID:
                 appendWhereStandalone(qb, "_id=?", uri.getPathSegments().get(3));
                 matchPending = MATCH_INCLUDE;
                 matchTrashed = MATCH_INCLUDE;
                 // fall-through
-            case VIDEO_MEDIA: {
+            case VIDEO_MEDIA:
                 if (type == TYPE_QUERY) {
                     qb.setTables("video");
-                    qb.setProjectionMap(
-                            getProjectionMap(Video.Media.class));
+                    qb.setProjectionMap(getProjectionMap(Video.Media.class));
                 } else {
                     qb.setTables("files");
-                    qb.setProjectionMap(
-                            getProjectionMap(Video.Media.class, Files.FileColumns.class));
                     appendWhereStandalone(qb, FileColumns.MEDIA_TYPE + "=?",
                             FileColumns.MEDIA_TYPE_VIDEO);
                 }
@@ -3194,11 +3182,11 @@ public class MediaProvider extends ContentProvider {
                     appendWhereStandalone(qb, FileColumns.VOLUME_NAME + " IN " + includeVolumes);
                 }
                 break;
-            }
+
             case VIDEO_THUMBNAILS_ID:
                 appendWhereStandalone(qb, "_id=?", uri.getPathSegments().get(3));
                 // fall-through
-            case VIDEO_THUMBNAILS: {
+            case VIDEO_THUMBNAILS:
                 qb.setTables("videothumbnails");
                 qb.setProjectionMap(getProjectionMap(Video.Thumbnails.class));
                 if (!allowGlobal && !checkCallingPermissionVideo(forWrite, callingPackage)) {
@@ -3207,7 +3195,7 @@ public class MediaProvider extends ContentProvider {
                                     + sharedPackages + ")");
                 }
                 break;
-            }
+
             case FILES_ID:
             case MTP_OBJECTS_ID:
                 appendWhereStandalone(qb, "_id=?", uri.getPathSegments().get(2));
@@ -3275,12 +3263,9 @@ public class MediaProvider extends ContentProvider {
             case DOWNLOADS: {
                 if (type == TYPE_QUERY) {
                     qb.setTables("downloads");
-                    qb.setProjectionMap(
-                            getProjectionMap(Downloads.class));
+                    qb.setProjectionMap(getProjectionMap(Downloads.class));
                 } else {
                     qb.setTables("files");
-                    qb.setProjectionMap(
-                            getProjectionMap(Downloads.class, Files.FileColumns.class));
                     appendWhereStandalone(qb, FileColumns.IS_DOWNLOAD + "=1");
                 }
 
@@ -3315,22 +3300,24 @@ public class MediaProvider extends ContentProvider {
                         "Unknown or unsupported URL: " + uri.toString());
         }
 
-        // To ensure we're enforcing our security model, all operations must
-        // have a projection map configured
-        if (qb.getProjectionMap() == null) {
-            throw new IllegalStateException("All queries must have a projection map");
-        }
+        if (type == TYPE_QUERY) {
+            // To ensure we're enforcing our security model, all queries must
+            // have a projection map configured
+            if (qb.getProjectionMap() == null) {
+                throw new IllegalStateException("All queries must have a projection map");
+            }
 
-        // If caller is an older app, we're willing to let through a
-        // greylist of technically invalid columns
-        if (getCallingPackageTargetSdkVersion() < Build.VERSION_CODES.Q) {
-            qb.setProjectionGreylist(sGreylist);
-        }
+            // If caller is an older app, we're willing to let through a
+            // greylist of technically invalid columns
+            if (getCallingPackageTargetSdkVersion() < Build.VERSION_CODES.Q) {
+                qb.setProjectionGreylist(sGreylist);
+            }
 
-        // If we're the legacy provider, and the caller is the system, then
-        // we're willing to let them access any columns they want
-        if (mLegacyProvider && isCallingPackageSystem()) {
-            qb.setProjectionGreylist(sGreylist);
+            // If we're the legacy provider, and the caller is the system, then
+            // we're willing to let them access any columns they want
+            if (mLegacyProvider && isCallingPackageSystem()) {
+                qb.setProjectionGreylist(sGreylist);
+            }
         }
 
         return qb;
@@ -6254,7 +6241,7 @@ public class MediaProvider extends ContentProvider {
     }
 
     @GuardedBy("sProjectionMapCache")
-    private static final ArrayMap<Class<?>[], ArrayMap<String, String>>
+    private static final ArrayMap<Class<?>, ArrayMap<String, String>>
             sProjectionMapCache = new ArrayMap<>();
 
     /**
@@ -6263,19 +6250,17 @@ public class MediaProvider extends ContentProvider {
      * using the {@link Column} annotation, and is designed to ensure that we
      * always support public API commitments.
      */
-    public static ArrayMap<String, String> getProjectionMap(Class<?>... clazzes) {
+    public static ArrayMap<String, String> getProjectionMap(Class<?> clazz) {
         synchronized (sProjectionMapCache) {
-            ArrayMap<String, String> map = sProjectionMapCache.get(clazzes);
+            ArrayMap<String, String> map = sProjectionMapCache.get(clazz);
             if (map == null) {
                 map = new ArrayMap<>();
-                sProjectionMapCache.put(clazzes, map);
+                sProjectionMapCache.put(clazz, map);
                 try {
-                    for (Class<?> clazz : clazzes) {
-                        for (Field field : clazz.getFields()) {
-                            if (field.isAnnotationPresent(Column.class)) {
-                                final String column = (String) field.get(null);
-                                map.put(column, column);
-                            }
+                    for (Field field : clazz.getFields()) {
+                        if (field.isAnnotationPresent(Column.class)) {
+                            final String column = (String) field.get(null);
+                            map.put(column, column);
                         }
                     }
                 } catch (ReflectiveOperationException e) {
-- 
2.35.1

