From dac28d10c74b1f55c231d89abe668cb35a079355 Mon Sep 17 00:00:00 2001
From: Bian Jin chen <kenjc.bian@rock-chips.com>
Date: Mon, 24 Aug 2020 16:06:31 +0800
Subject: [PATCH 1/3] Initial libion_ext for Rockchip Android R.

Signed-off-by: Bian Jin chen <kenjc.bian@rock-chips.com>
Change-Id: Iff6039bec697c7e6a4ba9b5f7c3bbc9dc72a6c51
---
 Android.bp                          |  32 +++
 include/ion/ion.h                   |   6 +-
 ion.c                               |  60 +++++
 ion_legacy_test.c                   | 348 ++++++++++++++++++++++++++++
 ion_test.c                          |  68 +++++-
 kernel-headers/linux/rockchip_ion.h |  61 +++++
 original-kernel-headers/linux/ion.h |   3 +-
 7 files changed, 568 insertions(+), 10 deletions(-)
 create mode 100644 ion_legacy_test.c
 create mode 100644 kernel-headers/linux/rockchip_ion.h

diff --git a/Android.bp b/Android.bp
index 67ac2ab..010a023 100644
--- a/Android.bp
+++ b/Android.bp
@@ -20,6 +20,30 @@ cc_library {
     min_sdk_version: "29",
 }
 
+cc_library {
+    name: "libion_ext",
+    vendor: true,
+    vndk: {
+        enabled: true,
+        extends: "libion",
+        support_system_process: true,
+    },
+    srcs: ["ion.c"],
+    shared_libs: ["liblog"],
+    local_include_dirs: [
+        "include",
+        "kernel-headers",
+    ],
+    export_include_dirs: [
+        "include",
+        "kernel-headers",
+    ],
+    cflags: [
+        "-Werror",
+        "-DLIBION_ROCKCHIP",
+    ],
+}
+
 cc_binary {
     name: "iontest",
     srcs: ["ion_test.c"],
@@ -28,4 +52,12 @@ cc_binary {
     cflags: ["-Werror"],
 }
 
+cc_binary {
+    name: "ionlegacytest",
+    srcs: ["ion_legacy_test.c"],
+    static_libs: ["libion"],
+    shared_libs: ["liblog"],
+    cflags: ["-Werror"],
+}
+
 subdirs = ["tests"]
diff --git a/include/ion/ion.h b/include/ion/ion.h
index 1480bd9..88d1a35 100644
--- a/include/ion/ion.h
+++ b/include/ion/ion.h
@@ -40,7 +40,11 @@ int ion_map(int fd, ion_user_handle_t handle, size_t length, int prot,
             int flags, off_t offset, unsigned char **ptr, int *map_fd);
 int ion_share(int fd, ion_user_handle_t handle, int *share_fd);
 int ion_import(int fd, int share_fd, ion_user_handle_t *handle);
-
+#ifdef LIBION_ROCKCHIP
+int ion_get_phys(int fd, ion_user_handle_t handle, unsigned long *phys);
+int ion_secure_alloc(int fd, size_t len, unsigned long *phys);
+int ion_secure_free(int fd, size_t len, unsigned long phys);
+#endif
 /**
   * Add 4.12+ kernel ION interfaces here for forward compatibility
   * This should be needed till the pre-4.12+ ION interfaces are backported.
diff --git a/ion.c b/ion.c
index 07b4caf..5930257 100644
--- a/ion.c
+++ b/ion.c
@@ -35,6 +35,10 @@
 
 #include <log/log.h>
 
+#ifdef LIBION_ROCKCHIP
+#include <linux/rockchip_ion.h>
+#endif
+
 #define ION_ABI_VERSION_MODULAR_HEAPS 2
 
 enum ion_version { ION_VERSION_UNKNOWN, ION_VERSION_MODERN, ION_VERSION_LEGACY };
@@ -209,6 +213,62 @@ int ion_sync_fd(int fd, int handle_fd) {
     return ion_ioctl(fd, ION_IOC_SYNC, &data);
 }
 
+#ifdef LIBION_ROCKCHIP
+int ion_get_phys(int fd, ion_user_handle_t handle, unsigned long *phys)
+{
+    struct ion_phys_data phys_data;
+    struct ion_custom_data data;
+
+    phys_data.handle = handle;
+    phys_data.phys = 0;
+
+    data.cmd = ION_IOC_GET_PHYS;
+    data.arg = (unsigned long)&phys_data;
+
+    int ret = ion_ioctl(fd, ION_IOC_CUSTOM, &data);
+    if (ret<0)
+        return ret;
+
+    *phys = phys_data.phys;
+
+    return 0;
+}
+
+int ion_secure_free(int fd, size_t len, unsigned long phys)
+{
+    struct ion_phys_data phys_data;
+    struct ion_custom_data data;
+
+    phys_data.handle = 0;
+    phys_data.phys = phys;
+    phys_data.size = len;
+
+    data.cmd = ION_IOC_FREE_SECURE;
+    data.arg = (unsigned long)&phys_data;
+
+    return ion_ioctl(fd, ION_IOC_CUSTOM, &data);
+}
+
+int ion_secure_alloc(int fd, size_t len, unsigned long *phys)
+{
+    struct ion_phys_data phys_data;
+    struct ion_custom_data data;
+
+    phys_data.handle = 0;
+    phys_data.size = len;
+
+    data.cmd = ION_IOC_ALLOC_SECURE;
+    data.arg = (unsigned long)&phys_data;
+
+    int ret = ion_ioctl(fd, ION_IOC_CUSTOM, &data);
+    if (ret<0)
+        return ret;
+
+    *phys = phys_data.phys;
+    return ret;
+}
+#endif
+
 int ion_query_heap_cnt(int fd, int* cnt) {
     int ret;
     struct ion_heap_query query;
diff --git a/ion_legacy_test.c b/ion_legacy_test.c
new file mode 100644
index 0000000..3202fa1
--- /dev/null
+++ b/ion_legacy_test.c
@@ -0,0 +1,348 @@
+/*
+ *   Copyright 2013 Google, Inc
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+#include <errno.h>
+#include <fcntl.h>
+#include <getopt.h>
+#include <string.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <sys/mman.h>
+#include <sys/ioctl.h>
+#include <sys/socket.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <unistd.h>
+
+#include <ion/ion.h>
+#include <linux/ion.h>
+
+size_t len = 1024*1024, align = 0;
+int prot = PROT_READ | PROT_WRITE;
+int map_flags = MAP_SHARED;
+int alloc_flags = 0;
+int heap_mask = 1;
+int test = -1;
+size_t stride;
+
+int ion_open_s() {
+    int fd = open("/dev/ion_legency", O_RDONLY | O_CLOEXEC);
+    if (fd < 0)
+        printf("open /dev/ion_legency failed: %s", strerror(errno));
+
+    return fd;
+}
+
+int _ion_alloc_test(int *fd, ion_user_handle_t *handle)
+{
+    int ret;
+
+    *fd = ion_open_s();
+    if (*fd < 0)
+        return *fd;
+
+    ret = ion_alloc(*fd, len, align, heap_mask, alloc_flags, handle);
+
+    if (ret)
+        printf("%s failed: %s\n", __func__, strerror(ret));
+    return ret;
+}
+
+void ion_alloc_test()
+{
+    int fd, ret;
+    ion_user_handle_t handle;
+
+    if(_ion_alloc_test(&fd, &handle))
+        return;
+
+    ret = ion_free(fd, handle);
+    if (ret) {
+        printf("%s failed: %s %d\n", __func__, strerror(ret), handle);
+        return;
+    }
+
+    ion_close(fd);
+    printf("ion alloc test: passed\n");
+}
+
+#ifdef LIBION_ROCKCHIP
+int _ion_secure_alloc_test(int *fd, size_t len, unsigned long *phys)
+{
+    int ret;
+
+    *fd = ion_open();
+    if (*fd < 0)
+        return *fd;
+
+    ret = ion_secure_alloc(*fd, len, phys);
+    if (ret)
+        printf("%s failed: %s\n", __func__, strerror(ret));
+    else
+        printf("%s success: phys = 0x%lx\n", __func__, *phys);
+
+    return ret;
+}
+
+void ion_secure_alloc_test()
+{
+    int fd, ret;
+    unsigned long phys;
+    ion_user_handle_t handle;
+
+    if(_ion_secure_alloc_test(&fd, 4096, &phys))
+        return;
+
+    ret = ion_secure_free(fd, 4096, phys);
+    if (ret) {
+        printf("%s failed: %s 0x%lx\n", __func__, strerror(ret), phys);
+        return;
+    }
+
+    ion_close(fd);
+    printf("ion secure alloc test: passed\n");
+    return;
+}
+#else
+void ion_secure_alloc_test() {
+    return;
+}
+#endif
+
+void ion_map_test()
+{
+    int fd, map_fd, ret;
+    size_t i;
+    ion_user_handle_t handle;
+    unsigned char *ptr;
+
+    if(_ion_alloc_test(&fd, &handle))
+        return;
+
+    ret = ion_map(fd, handle, len, prot, map_flags, 0, &ptr, &map_fd);
+    if (ret)
+        return;
+
+    for (i = 0; i < len; i++) {
+        ptr[i] = (unsigned char)i;
+    }
+    for (i = 0; i < len; i++)
+        if (ptr[i] != (unsigned char)i)
+            printf("%s failed wrote %zu read %d from mapped "
+                   "memory\n", __func__, i, ptr[i]);
+    /* clean up properly */
+    ret = ion_free(fd, handle);
+    ion_close(fd);
+    munmap(ptr, len);
+    close(map_fd);
+
+    _ion_alloc_test(&fd, &handle);
+    close(fd);
+
+#if 0
+    munmap(ptr, len);
+    close(map_fd);
+    ion_close(fd);
+
+    _ion_alloc_test(len, align, flags, &fd, &handle);
+    close(map_fd);
+    ret = ion_map(fd, handle, len, prot, flags, 0, &ptr, &map_fd);
+    /* don't clean up */
+#endif
+}
+
+void ion_share_test()
+
+{
+    ion_user_handle_t handle;
+    int sd[2];
+    int num_fd = 1;
+    struct iovec count_vec = {
+        .iov_base = &num_fd,
+        .iov_len = sizeof num_fd,
+    };
+    char buf[CMSG_SPACE(sizeof(int))];
+    socketpair(AF_UNIX, SOCK_STREAM, 0, sd);
+    if (fork()) {
+        struct msghdr msg = {
+            .msg_control = buf,
+            .msg_controllen = sizeof buf,
+            .msg_iov = &count_vec,
+            .msg_iovlen = 1,
+        };
+
+        struct cmsghdr *cmsg;
+        int fd, share_fd, ret;
+        char *ptr;
+        /* parent */
+        if(_ion_alloc_test(&fd, &handle))
+            return;
+        ret = ion_share(fd, handle, &share_fd);
+        if (ret)
+            printf("share failed %s\n", strerror(errno));
+        ptr = mmap(NULL, len, prot, map_flags, share_fd, 0);
+        if (ptr == MAP_FAILED) {
+            return;
+        }
+        strcpy(ptr, "master");
+        cmsg = CMSG_FIRSTHDR(&msg);
+        cmsg->cmsg_level = SOL_SOCKET;
+        cmsg->cmsg_type = SCM_RIGHTS;
+        cmsg->cmsg_len = CMSG_LEN(sizeof(int));
+        *(int *)CMSG_DATA(cmsg) = share_fd;
+        /* send the fd */
+        printf("master? [%10s] should be [master]\n", ptr);
+        printf("master sending msg 1\n");
+        sendmsg(sd[0], &msg, 0);
+        if (recvmsg(sd[0], &msg, 0) < 0)
+            perror("master recv msg 2");
+        printf("master? [%10s] should be [child]\n", ptr);
+
+        /* send ping */
+        sendmsg(sd[0], &msg, 0);
+        printf("master->master? [%10s]\n", ptr);
+        if (recvmsg(sd[0], &msg, 0) < 0)
+            perror("master recv 1");
+        close(fd);
+        _exit(0);
+    } else {
+        struct cmsghdr *cmsg;
+        char* ptr;
+        int fd, recv_fd;
+        char* child_buf[100];
+        /* child */
+        struct iovec count_vec = {
+            .iov_base = child_buf,
+            .iov_len = sizeof child_buf,
+        };
+
+        struct msghdr child_msg = {
+            .msg_control = buf,
+            .msg_controllen = sizeof buf,
+            .msg_iov = &count_vec,
+            .msg_iovlen = 1,
+        };
+
+        if (recvmsg(sd[1], &child_msg, 0) < 0)
+            perror("child recv msg 1");
+        cmsg = CMSG_FIRSTHDR(&child_msg);
+        if (cmsg == NULL) {
+            printf("no cmsg rcvd in child");
+            return;
+        }
+        recv_fd = *(int*)CMSG_DATA(cmsg);
+        if (recv_fd < 0) {
+            printf("could not get recv_fd from socket");
+            return;
+        }
+        printf("child %d\n", recv_fd);
+        fd = ion_open();
+        ptr = mmap(NULL, len, prot, map_flags, recv_fd, 0);
+        if (ptr == MAP_FAILED) {
+            return;
+        }
+        printf("child? [%10s] should be [master]\n", ptr);
+        strcpy(ptr, "child");
+        printf("child sending msg 2\n");
+        sendmsg(sd[1], &child_msg, 0);
+        close(fd);
+    }
+}
+
+int main(int argc, char* argv[]) {
+    int c;
+    enum tests {
+        ALLOC_TEST = 0, MAP_TEST, SHARE_TEST, SECURE_ALLOC_TEST,
+    };
+
+    while (1) {
+        static struct option opts[] = {
+            {"alloc", no_argument, 0, 'a'},
+            {"alloc_flags", required_argument, 0, 'f'},
+            {"heap_mask", required_argument, 0, 'h'},
+            {"map", no_argument, 0, 'm'},
+            {"share", no_argument, 0, 's'},
+            {"len", required_argument, 0, 'l'},
+            {"align", required_argument, 0, 'g'},
+            {"map_flags", required_argument, 0, 'z'},
+            {"prot", required_argument, 0, 'p'},
+            {"secure_alloc", no_argument, 0, 'e'},
+        };
+        int i = 0;
+        c = getopt_long(argc, argv, "af:h:l:mr:ste", opts, &i);
+        if (c == -1)
+            break;
+
+        switch (c) {
+        case 'l':
+            len = atol(optarg);
+            break;
+        case 'g':
+            align = atol(optarg);
+            break;
+        case 'z':
+            map_flags = 0;
+            map_flags |= strstr(optarg, "PROT_EXEC") ? PROT_EXEC : 0;
+            map_flags |= strstr(optarg, "PROT_READ") ? PROT_READ: 0;
+            map_flags |= strstr(optarg, "PROT_WRITE") ? PROT_WRITE: 0;
+            map_flags |= strstr(optarg, "PROT_NONE") ? PROT_NONE: 0;
+            break;
+        case 'p':
+            prot = 0;
+            prot |= strstr(optarg, "MAP_PRIVATE") ? MAP_PRIVATE : 0;
+            prot |= strstr(optarg, "MAP_SHARED") ? MAP_SHARED : 0;
+            break;
+        case 'f':
+            alloc_flags = atol(optarg);
+            break;
+        case 'h':
+            heap_mask = atol(optarg);
+            break;
+        case 'a':
+            test = ALLOC_TEST;
+            break;
+        case 'e':
+            test = SECURE_ALLOC_TEST;
+            break;
+        case 'm':
+            test = MAP_TEST;
+            break;
+        case 's':
+            test = SHARE_TEST;
+            break;
+        }
+    }
+    printf("test %d, len %zu, align %zu, map_flags %d, prot %d, heap_mask %d,"
+           " alloc_flags %d\n", test, len, align, map_flags, prot,
+           heap_mask, alloc_flags);
+    switch (test) {
+        case ALLOC_TEST:
+            ion_alloc_test();
+            break;
+        case SECURE_ALLOC_TEST:
+            ion_secure_alloc_test();
+            break;
+        case MAP_TEST:
+            ion_map_test();
+            break;
+        case SHARE_TEST:
+            ion_share_test();
+            break;
+        default:
+            printf("must specify a test (alloc, map, share, securealloc)\n");
+    }
+    return 0;
+}
diff --git a/ion_test.c b/ion_test.c
index f3874ae..5089e48 100644
--- a/ion_test.c
+++ b/ion_test.c
@@ -34,7 +34,7 @@ size_t len = 1024*1024, align = 0;
 int prot = PROT_READ | PROT_WRITE;
 int map_flags = MAP_SHARED;
 int alloc_flags = 0;
-int heap_mask = 1;
+int heap_mask = 2;
 int test = -1;
 size_t stride;
 
@@ -46,7 +46,7 @@ int _ion_alloc_test(int *fd, ion_user_handle_t *handle)
     if (*fd < 0)
         return *fd;
 
-    ret = ion_alloc(*fd, len, align, heap_mask, alloc_flags, handle);
+    ret = ion_alloc_fd(*fd, len, align, heap_mask, alloc_flags, handle);
 
     if (ret)
         printf("%s failed: %s\n", __func__, strerror(ret));
@@ -61,14 +61,59 @@ void ion_alloc_test()
     if(_ion_alloc_test(&fd, &handle))
         return;
 
-    ret = ion_free(fd, handle);
+    if (ion_is_legacy(fd)) {
+        ret = ion_free(fd, handle);
+        if (ret) {
+            printf("%s failed: %s %d\n", __func__, strerror(ret), handle);
+            return;
+        }
+    }
+    ion_close(fd);
+    printf("ion alloc test: passed\n");
+}
+
+#ifdef LIBION_ROCKCHIP
+int _ion_secure_alloc_test(int *fd, size_t len, unsigned long *phys)
+{
+    int ret;
+
+    *fd = ion_open();
+    if (*fd < 0)
+        return *fd;
+
+    ret = ion_secure_alloc(*fd, len, phys);
+    if (ret)
+        printf("%s failed: %s\n", __func__, strerror(ret));
+    else
+        printf("%s success: phys = 0x%lx\n", __func__, *phys);
+
+    return ret;
+}
+
+void ion_secure_alloc_test()
+{
+    int fd, ret;
+    unsigned long phys;
+    ion_user_handle_t handle;
+
+    if(_ion_secure_alloc_test(&fd, 4096, &phys))
+        return;
+
+    ret = ion_secure_free(fd, 4096, phys);
     if (ret) {
-        printf("%s failed: %s %d\n", __func__, strerror(ret), handle);
+        printf("%s failed: %s 0x%lx\n", __func__, strerror(ret), phys);
         return;
     }
+
     ion_close(fd);
-    printf("ion alloc test: passed\n");
+    printf("ion secure alloc test: passed\n");
+    return;
 }
+#else
+void ion_secure_alloc_test() {
+    return;
+}
+#endif
 
 void ion_map_test()
 {
@@ -213,7 +258,7 @@ void ion_share_test()
 int main(int argc, char* argv[]) {
     int c;
     enum tests {
-        ALLOC_TEST = 0, MAP_TEST, SHARE_TEST,
+        ALLOC_TEST = 0, MAP_TEST, SHARE_TEST, SECURE_ALLOC_TEST,
     };
 
     while (1) {
@@ -227,9 +272,10 @@ int main(int argc, char* argv[]) {
             {"align", required_argument, 0, 'g'},
             {"map_flags", required_argument, 0, 'z'},
             {"prot", required_argument, 0, 'p'},
+            {"secure_alloc", no_argument, 0, 'e'},
         };
         int i = 0;
-        c = getopt_long(argc, argv, "af:h:l:mr:st", opts, &i);
+        c = getopt_long(argc, argv, "af:h:l:mr:ste", opts, &i);
         if (c == -1)
             break;
 
@@ -261,6 +307,9 @@ int main(int argc, char* argv[]) {
         case 'a':
             test = ALLOC_TEST;
             break;
+        case 'e':
+            test = SECURE_ALLOC_TEST;
+            break;
         case 'm':
             test = MAP_TEST;
             break;
@@ -276,6 +325,9 @@ int main(int argc, char* argv[]) {
         case ALLOC_TEST:
             ion_alloc_test();
             break;
+        case SECURE_ALLOC_TEST:
+            ion_secure_alloc_test();
+            break;
         case MAP_TEST:
             ion_map_test();
             break;
@@ -283,7 +335,7 @@ int main(int argc, char* argv[]) {
             ion_share_test();
             break;
         default:
-            printf("must specify a test (alloc, map, share)\n");
+            printf("must specify a test (alloc, map, share, securealloc)\n");
     }
     return 0;
 }
diff --git a/kernel-headers/linux/rockchip_ion.h b/kernel-headers/linux/rockchip_ion.h
new file mode 100644
index 0000000..92d8c53
--- /dev/null
+++ b/kernel-headers/linux/rockchip_ion.h
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2014 Meiyou.chen <cmy@rock-chips.com>
+ * Copyright (C) 2014 ROCKCHIP, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef _LINUX_ROCKCHIP_ION_H
+#define _LINUX_ROCKCHIP_ION_H
+
+#ifdef __KERNEL__
+#include "../../drivers/staging/android/ion/ion.h"
+#else
+#include <linux/ion.h>
+#endif
+
+#define ROCKCHIP_ION_VERSION	"v1.1"
+
+/*
+ * ion_heap_ids order by ion_heap_type
+ */
+enum ion_heap_ids {
+	ION_VMALLOC_HEAP_ID = 0,
+	ION_CARVEOUT_HEAP_ID = 2,
+	ION_CMA_HEAP_ID = 4,
+	ION_SECURE_HEAP_ID = 5,
+};
+
+#define ION_HEAP(bit) (1 << (bit))
+
+struct ion_phys_data {
+	ion_user_handle_t handle;
+	unsigned long phys;
+	unsigned long size;
+};
+
+#define ION_IOC_ROCKCHIP_MAGIC 'R'
+
+/**
+ * Get phys addr of the handle specified.
+ */
+#define ION_IOC_GET_PHYS	_IOWR(ION_IOC_ROCKCHIP_MAGIC, 0, \
+						struct ion_phys_data)
+
+/* Alloc secure region. */
+#define ION_IOC_ALLOC_SECURE	_IOWR(ION_IOC_ROCKCHIP_MAGIC, 1, \
+				struct ion_phys_data)
+
+/* Free secure region alloced. */
+#define ION_IOC_FREE_SECURE	_IOWR(ION_IOC_ROCKCHIP_MAGIC, 2, \
+				struct ion_phys_data)
+
+#endif
diff --git a/original-kernel-headers/linux/ion.h b/original-kernel-headers/linux/ion.h
index f09e7c1..a6a6cf7 100644
--- a/original-kernel-headers/linux/ion.h
+++ b/original-kernel-headers/linux/ion.h
@@ -40,6 +40,7 @@ enum ion_heap_type {
 	ION_HEAP_TYPE_CARVEOUT,
 	ION_HEAP_TYPE_CHUNK,
 	ION_HEAP_TYPE_DMA,
+	ION_HEAP_TYPE_SECURE,
 	ION_HEAP_TYPE_CUSTOM, /* must be last so device specific heaps always
 				 are at the end of this enum */
 	ION_NUM_HEAPS = 16,
@@ -49,7 +50,7 @@ enum ion_heap_type {
 #define ION_HEAP_SYSTEM_CONTIG_MASK	(1 << ION_HEAP_TYPE_SYSTEM_CONTIG)
 #define ION_HEAP_CARVEOUT_MASK		(1 << ION_HEAP_TYPE_CARVEOUT)
 #define ION_HEAP_TYPE_DMA_MASK		(1 << ION_HEAP_TYPE_DMA)
-
+#define ION_HEAP_TYPE_SECURE_MASK	(1 << ION_HEAP_TYPE_SECURE)
 #define ION_NUM_HEAP_IDS		sizeof(unsigned int) * 8
 
 /**
-- 
2.36.0

