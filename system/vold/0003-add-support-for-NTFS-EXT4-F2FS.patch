From 153cf744739ed3a59392bed9250dfad5b484d244 Mon Sep 17 00:00:00 2001
From: Wu Jingchen <oven.wu@rock-chips.com>
Date: Fri, 9 Oct 2020 17:51:07 +0800
Subject: [PATCH 3/5] add support for NTFS EXT4 F2FS

Signed-off-by: Wu Jingchen <oven.wu@rock-chips.com>
Change-Id: If39cc1cfde1d62dfd7541e83a1846974d3273bf3
---
 Android.bp             |   1 +
 VoldUtil.h             |   2 +
 fs/Ntfs.cpp            | 274 +++++++++++++++++++++++++++++++++++++++++
 fs/Ntfs.h              |  30 +++++
 model/PublicVolume.cpp |  52 ++++++++
 5 files changed, 359 insertions(+)
 create mode 100755 fs/Ntfs.cpp
 create mode 100755 fs/Ntfs.h

diff --git a/Android.bp b/Android.bp
index b033647..cac140c 100644
--- a/Android.bp
+++ b/Android.bp
@@ -139,6 +139,7 @@ cc_library_static {
         "fs/Ext4.cpp",
         "fs/F2fs.cpp",
         "fs/Vfat.cpp",
+        "fs/Ntfs.cpp",
         "model/Disk.cpp",
         "model/EmulatedVolume.cpp",
         "model/ObbVolume.cpp",
diff --git a/VoldUtil.h b/VoldUtil.h
index ce6b411..9ff9d09 100644
--- a/VoldUtil.h
+++ b/VoldUtil.h
@@ -17,7 +17,9 @@
 #pragma once
 
 #include <fstab/fstab.h>
+#include <sys/cdefs.h>
 
 extern android::fs_mgr::Fstab fstab_default;
 
 #define DATA_MNT_POINT "/data"
+#define ARRAY_SIZE(a) (sizeof(a) / sizeof(*(a)))
diff --git a/fs/Ntfs.cpp b/fs/Ntfs.cpp
new file mode 100755
index 0000000..db2744a
--- /dev/null
+++ b/fs/Ntfs.cpp
@@ -0,0 +1,274 @@
+/*
+* Copyright (C) 2010 The Android Open Source Project
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <errno.h>
+#include <string.h>
+#include <dirent.h>
+#include <errno.h>
+#include <fcntl.h>
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/mman.h>
+#include <sys/mount.h>
+
+#include <linux/kdev_t.h>
+#include <sys/wait.h>
+#include <linux/fs.h>
+#include <sys/ioctl.h>
+
+#define LOG_TAG "Vold"
+
+#include <cutils/log.h>
+#include <cutils/properties.h>
+#include <logwrap/logwrap.h>
+#include "Ntfs.h"
+
+#include "VoldUtil.h"
+
+static char NTFS_CHECK_PATH[] = "/system/bin/ntfsfix";
+static char NTFS_3G_PATH[] = "/system/bin/ntfs-3g";
+static char NTFS_FORMAT_PATH[] = "/system/bin/mkntfs";
+
+#define LOG_NONE        0
+#define LOG_ALOG        1
+#define LOG_KLOG        2
+#define LOG_FILE        4
+
+extern "C" int mount(const char *, const char *, const char *, unsigned long, const void *);
+
+int Ntfs::check(const char *fsPath) {
+    if (access(NTFS_CHECK_PATH, X_OK)) {
+        SLOGW("Skipping ntfs checks\n");
+        return 0;
+    }
+
+    int rc = 0;
+    int status;
+    const char *args[4];
+    /* we first use -n to do ntfs detection */
+    args[0] = NTFS_CHECK_PATH;
+    args[1] = "-n";
+    args[2] = fsPath;
+    args[3] = NULL;
+
+    rc = logwrap_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+        LOG_ALOG, false, NULL);
+    if (rc) {
+        errno = ENODATA;
+        return -1;
+    }
+
+    SLOGI("Ntfs filesystem existed");
+
+    /* do the real fix */
+    /* redo the ntfsfix without -n to fix problems */
+    args[1] = fsPath;
+    args[2] = NULL;
+
+    rc = logwrap_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+         LOG_ALOG, false, NULL);
+    if (rc) {
+        errno = EIO;
+        SLOGE("Filesystem check failed (unknown exit code %d)", rc);
+        return -1;
+    }
+
+    SLOGI("Ntfs filesystem check completed OK");
+    return 0;
+}
+
+int Ntfs::doMount(const char *fsPath, const char *mountPoint, bool ro, int ownerUid, int ownerGid)
+{
+    int rc = 0;
+    do {
+        if (!ro) {
+            int status_f;
+            const char *args[6];
+            char mountData[255];
+            args[0] = NTFS_3G_PATH;
+            args[1] = "-o";
+            args[2] = mountData;
+            args[3] = fsPath;
+            args[4] = mountPoint;
+            args[5] = NULL;
+
+            sprintf(mountData, "utf8,uid=%d,gid=%d,shortname=mixed,nodev,nosuid,dirsync,"
+                "big_writes,noatime,delay_mtime=120",
+                ownerUid, ownerGid);
+
+            rc = logwrap_fork_execvp(ARRAY_SIZE(args), (char **)args, &status_f,
+                false, LOG_ALOG, false, NULL);
+            SLOGI(" %s %s %s", NTFS_3G_PATH, fsPath, mountPoint);
+            if (!rc) {
+
+                if (WIFEXITED(status_f)) {
+                    if (WEXITSTATUS(status_f)) {
+                        SLOGE("ntfs-3g fail  WEXITSTATUS %d",WEXITSTATUS(status_f));
+                        return -1;
+                    }
+                }
+                SLOGI("Mount NTFS device form %s to %s OK", fsPath, mountPoint);
+                char *lost_path;
+                asprintf(&lost_path, "%s/LOST.DIR", mountPoint);
+                if (access(lost_path, F_OK)) {
+                    /*
+                    * Create a LOST.DIR in the root so we have somewhere to put
+                    * lost cluster chains (fsck_msdos doesn't currently do this)
+                    */
+                    if (mkdir(lost_path, 0755)) {
+                        SLOGE("Unable to create LOST.DIR (%s)", strerror(errno));
+                    }
+                }
+                free(lost_path);
+                return 0;
+            } else {
+                SLOGE("Mount NTFS device form %s to %s failed", fsPath, mountPoint);
+                return -1;
+            }
+        } else {
+            int status;
+            const char *args[6];
+            char mountData[255];
+            args[0] = NTFS_3G_PATH;
+            args[1] = "-o";
+            args[2] = fsPath;
+            args[3] = mountPoint;
+            args[4] = mountData;
+            args[5] = NULL;
+
+            sprintf(mountData," ro,utf8,uid=%d,gid=%d", ownerUid, ownerGid);
+
+            rc = logwrap_fork_execvp(ARRAY_SIZE(args), (char **)args, &status,
+                false, LOG_ALOG, false, NULL);
+
+            SLOGI(" %s %s %s____%d", NTFS_3G_PATH, fsPath, mountPoint, rc);
+            if (rc != 0) {
+                SLOGE("Filesystem mount failed due to logwrap error");
+                errno = EIO;
+                return -1;
+            }
+
+            if (!WIFEXITED(status)) {
+                SLOGE("Filesystem mount did not exit properly");
+                errno = EIO;
+                return -1;
+            }
+
+            status = WEXITSTATUS(status);
+            if (status == 0) {
+                char *lost_path;
+                asprintf(&lost_path, "%s/LOST.DIR", mountPoint);
+                if (access(lost_path, F_OK)) {
+                    /*
+                    * Create a LOST.DIR in the root so we have somewhere to put
+                    * lost cluster chains (fsck_msdos doesn't currently do this)
+                    */
+                    if (mkdir(lost_path, 0755)) {
+                        SLOGE("Unable to create LOST.DIR (%s)", strerror(errno));
+                    }
+                }
+                free(lost_path);
+                SLOGI("Mount NTFS device form %s to %s OK.", fsPath, mountPoint);
+                return 0;
+            } else {
+                SLOGE("%dMount NTFS device form %s to %s failed.", status, fsPath, mountPoint);
+                return -1;
+            }
+        }
+    } while (0);
+    return rc;
+}
+
+int Ntfs::unMount(const char *mountPoint)
+{
+    int rc = 0;
+    do {
+        int status;
+        const char *args[3];
+        args[0] = "umount";
+        args[1] = mountPoint;
+        args[2] = NULL;
+
+        rc = logwrap_fork_execvp(ARRAY_SIZE(args), (char **)args, &status,
+            false, LOG_ALOG, false, NULL);
+        if (!rc) {
+            SLOGI("unMount NTFS device %s OK",mountPoint);
+        } else {
+            SLOGE("unMount NTFS device %s failed",mountPoint);
+        }
+    } while (0);
+
+    return rc;
+}
+
+int Ntfs::format(const char *fsPath, unsigned int numSectors, bool wipe, const char *label)
+{
+    const char *args[7];
+    int rc = -1;
+    int status;
+
+    if (access(NTFS_FORMAT_PATH, X_OK)) {
+        SLOGE("Unable to format, mkntfs not found.");
+        return -1;
+    }
+
+    args[0] = NTFS_FORMAT_PATH;
+    if (wipe) {
+        args[1] = "-L";
+        args[2] = label;
+        args[3] = fsPath;
+        if (numSectors) {
+            char sectors[16];
+            sprintf(sectors, "%d", numSectors);
+            args[4] = sectors;
+            args[5] = NULL;
+        }
+        else
+            args[4] = NULL;
+    } else {
+        args[1] = "-f";
+        args[2] = "-L";
+        args[3] = label;
+        args[4] = fsPath;
+        if (numSectors) {
+            char sectors[16];
+            sprintf(sectors, "%d", numSectors);
+            args[5] = sectors;
+            args[6] = NULL;
+        }
+        else
+            args[5] = NULL;
+    }
+
+    rc = logwrap_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+        LOG_ALOG, false, NULL);
+
+    if (rc == 0) {
+        SLOGI("Filesystem (NTFS) formatted OK");
+        return 0;
+    } else {
+        SLOGE("Format (NTFS) failed (unknown exit code %d)", rc);
+        errno = EIO;
+        return -1;
+    }
+    return 0;
+}
diff --git a/fs/Ntfs.h b/fs/Ntfs.h
new file mode 100755
index 0000000..471fb6e
--- /dev/null
+++ b/fs/Ntfs.h
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef _NTFS_H
+#define _NTFS_H
+
+#include <unistd.h>
+
+class Ntfs {
+public:
+    static int check(const char *fsPath);
+    static int doMount(const char *fsPath, const char *mountPoint, bool ro, int ownerUid,int ownerGid);
+    static int unMount(const char *mountPoint);
+    static int format(const char *fsPath, unsigned int numSectors, bool wipe, const char *label);
+};
+
+#endif
\ No newline at end of file
diff --git a/model/PublicVolume.cpp b/model/PublicVolume.cpp
index d40e3e3..86b1203 100644
--- a/model/PublicVolume.cpp
+++ b/model/PublicVolume.cpp
@@ -21,6 +21,11 @@
 #include "VolumeManager.h"
 #include "fs/Exfat.h"
 #include "fs/Vfat.h"
+#include "fs/Ext4.h"
+#include "fs/F2fs.h"
+#include "fs/Ntfs.h"
+
+#include <cutils/properties.h>
 
 #include <android-base/logging.h>
 #include <android-base/properties.h>
@@ -110,6 +115,38 @@ status_t PublicVolume::doMount() {
             LOG(ERROR) << getId() << " failed filesystem check";
             return -EIO;
         }
+    }  else if (mFsType == "ntfs") {
+        char value[PROPERTY_VALUE_MAX];
+        property_get("ro.factory.storage_suppntfs", value, "");
+        if (strcmp("true", value) == 0) {
+            int res = Ntfs::check(mDevPath.c_str());
+            if (res == 0 || res == 1) {
+                LOG(DEBUG) << getId() << " passed filesystem check";
+            } else {
+                PLOG(ERROR) << getId() << " failed filesystem check";
+                return -EIO;
+            }
+        }
+        else
+        {
+            LOG(DEBUG) << getId() << "Not support Ntfs in BoardConfig";
+        }
+    }  else if (mFsType == "ext4" && ext4::IsSupported()) {
+        int res = ext4::Check(mDevPath, mRawPath);
+        if (res == 0 || res == 1) {
+            LOG(DEBUG) << getId() << " passed filesystem check";
+        } else {
+            PLOG(ERROR) << getId() << " failed filesystem check";
+            return -EIO;
+        }
+    }  else if (mFsType == "f2fs" && f2fs::IsSupported()) {
+        int res = f2fs::Check(mDevPath);
+        if (res == 0) {
+            LOG(DEBUG) << getId() << " passed filesystem check";
+        } else {
+            PLOG(ERROR) << getId() << " failed filesystem check";
+            return -EIO;
+        }
     } else {
         LOG(ERROR) << getId() << " unsupported filesystem " << mFsType;
         return -EIO;
@@ -152,6 +189,21 @@ status_t PublicVolume::doMount() {
             PLOG(ERROR) << getId() << " failed to mount " << mDevPath;
             return -EIO;
         }
+    } else if (mFsType == "ntfs") {
+        if (Ntfs::doMount(mDevPath.c_str(), mRawPath.c_str(), false, false, false)) {
+            PLOG(ERROR) << getId() << " nfts failed to mount " << mDevPath;
+            return -EIO;
+        }
+    } else if (mFsType == "ext4") {
+        if (ext4::Mount(mDevPath, mRawPath, false, false, true)) {
+            PLOG(ERROR) << getId() << " failed to mount " << mDevPath;
+            return -EIO;
+        }
+    } else if (mFsType == "f2fs") {
+        if (f2fs::Mount(mDevPath, mRawPath)) {
+            PLOG(ERROR) << getId() << " failed to mount " << mDevPath;
+             return -EIO;
+        }
     }
 
     if (getMountFlags() & MountFlags::kPrimary) {
-- 
2.36.0

