From 195301873e68353ed3394b6afbd972e1172543b8 Mon Sep 17 00:00:00 2001
From: Dayao Ji <jdy@rock-chips.com>
Date: Tue, 1 Sep 2020 14:38:57 +0800
Subject: [PATCH 02/11] install: add rk loader support

Signed-off-by: Dayao Ji <jdy@rock-chips.com>
Change-Id: Ida353bd46d2f8cf29e071b8da96da778150d3aaa
---
 install/Android.bp                  |   2 +
 install/fuse_install.cpp            |   6 +-
 install/include/install/install.h   |   4 ++
 install/include/install/wipe_data.h |   4 ++
 install/install.cpp                 | 108 ++++++++++++++++++++++++++++
 install/wipe_data.cpp               |  80 ++++++++++++++++++++-
 6 files changed, 200 insertions(+), 4 deletions(-)

diff --git a/install/Android.bp b/install/Android.bp
index bed3bc50..6ce83804 100644
--- a/install/Android.bp
+++ b/install/Android.bp
@@ -43,6 +43,8 @@ cc_defaults {
 
         // external dependencies
         "libvintf",
+        "libmtdutils",
+        "librkupdate",
     ],
 }
 
diff --git a/install/fuse_install.cpp b/install/fuse_install.cpp
index 143b5d3f..177e9d27 100644
--- a/install/fuse_install.cpp
+++ b/install/fuse_install.cpp
@@ -39,7 +39,7 @@
 #include "install/install.h"
 #include "recovery_utils/roots.h"
 
-static constexpr const char* SDCARD_ROOT = "/sdcard";
+static constexpr const char* SDCARD_ROOT = "/mnt/external_sd";
 // How long (in seconds) we wait for the fuse-provided package file to
 // appear, before timing out.
 static constexpr int SDCARD_INSTALL_TIMEOUT = 10;
@@ -181,10 +181,10 @@ InstallResult InstallWithFuseFromPath(std::string_view path, RecoveryUI* ui) {
       }
     }
     auto package =
-        Package::CreateFilePackage(FUSE_SIDELOAD_HOST_PATHNAME,
+        Package::CreateFilePackage(/*FUSE_SIDELOAD_HOST_PATHNAME*/"/mnt/external_sd/update.zip",
                                    std::bind(&RecoveryUI::SetProgress, ui, std::placeholders::_1));
     result =
-        InstallPackage(package.get(), FUSE_SIDELOAD_HOST_PATHNAME, false, 0 /* retry_count */, ui);
+        InstallPackage(package.get(), /*FUSE_SIDELOAD_HOST_PATHNAME*/"/mnt/external_sd/update.zip", false, 0 /* retry_count */, ui);
     break;
   }
 
diff --git a/install/include/install/install.h b/install/include/install/install.h
index bef23e9c..bc4784ff 100644
--- a/install/include/install/install.h
+++ b/install/include/install/install.h
@@ -67,3 +67,7 @@ bool CheckPackageMetadata(const std::map<std::string, std::string>& metadata, Ot
 // Ensures the path to the update package is mounted. Also set the |should_use_fuse| to true if the
 // package stays on a removable media.
 bool SetupPackageMount(const std::string& package_path, bool* should_use_fuse);
+
+bool SetupBlockMapMount(const std::string& package_path);
+
+int install_rkloader_package(Package* package, const std::string_view package_id, RecoveryUI* ui);
diff --git a/install/include/install/wipe_data.h b/install/include/install/wipe_data.h
index b34891f3..edb3b104 100644
--- a/install/include/install/wipe_data.h
+++ b/install/include/install/wipe_data.h
@@ -28,3 +28,7 @@ bool WipeCache(RecoveryUI* ui, const std::function<bool()>& confirm);
 
 // Returns true on success.
 bool WipeData(Device* device, bool convert_fbe);
+
+void SureMetadataMount();
+void WipeFrp();
+int ResizeData();
diff --git a/install/install.cpp b/install/install.cpp
index d404997d..b9b6fbf6 100644
--- a/install/install.cpp
+++ b/install/install.cpp
@@ -56,6 +56,7 @@
 #include "recovery_ui/ui.h"
 #include "recovery_utils/roots.h"
 #include "recovery_utils/thermalutil.h"
+#include "rkupdate/Upgrade.h"
 
 using namespace std::chrono_literals;
 
@@ -699,3 +700,110 @@ bool SetupPackageMount(const std::string& package_path, bool* should_use_fuse) {
   }
   return true;
 }
+
+
+bool SetupBlockMapMount(const std::string& package_path) {
+  if (package_path.empty()) {
+    return false;
+  }
+
+  if (package_path[0] == '@') {
+    auto block_map_path = package_path.substr(1);
+    if (ensure_path_mounted(block_map_path) != 0) {
+      LOG(ERROR) << "Failed to mount " << block_map_path;
+      return false;
+    }
+    return true;
+  }
+
+  if (ensure_path_mounted(package_path) != 0) {
+    LOG(ERROR) << "Failed to mount " << package_path;
+    return false;
+  }
+
+  return true;
+}
+
+
+static int rkloader_bin(ZipArchiveHandle zip,const std::string& binary_path) {
+  static constexpr const char* BINARY_NAME = "RKLoader.bin";
+  ZipEntry binary_entry;
+  if (FindEntry(zip, BINARY_NAME, &binary_entry) != 0) {
+    LOG(ERROR) << "Failed to find update binary " << BINARY_NAME;
+    return INSTALL_CORRUPT;
+  }
+
+  unlink(binary_path.c_str());
+  int fd = open(binary_path.c_str(), O_CREAT | O_WRONLY | O_TRUNC | O_CLOEXEC, 0755);
+  if (fd == -1) {
+    PLOG(ERROR) << "Failed to create " << binary_path;
+    return INSTALL_ERROR;
+  }
+
+  int32_t error = ExtractEntryToFile(zip, &binary_entry, fd);
+  close(fd);
+  if (error != 0) {
+    LOG(ERROR) << "Failed to extract " << BINARY_NAME << ": " << ErrorCodeString(error);
+    return INSTALL_ERROR;
+  }
+
+  return INSTALL_SUCCESS;
+}
+
+static int really_install_rkloader_package(Package* package,RecoveryUI* ui) {
+  ui->SetBackground(RecoveryUI::INSTALLING_UPDATE);
+  // Give verification half the progress bar...
+  ui->SetProgressType(RecoveryUI::DETERMINATE);
+  ui->ShowProgress(VERIFICATION_PROGRESS_FRACTION, VERIFICATION_PROGRESS_TIME);
+
+  // Verify package.
+  if (!verify_package(package, ui)) {
+	return INSTALL_CORRUPT;
+  }
+
+  // Try to open the package.
+  ZipArchiveHandle zip = package->GetZipArchiveHandle();
+  if (!zip) {
+	LOG(ERROR) << "failed to GetZipArchiveHandle kZipOpenFailure ";
+    return INSTALL_CORRUPT;
+  }
+
+  // Verify and install the contents of the package.
+  ui->Print("Installing update...\n");
+
+  ui->SetEnableReboot(false);
+  int result = rkloader_bin(zip, "/tmp/RKLoader.bin");
+  if (INSTALL_SUCCESS == result) {
+    void *pCallback = NULL;
+    void *pProgressCallback = NULL;
+    char *szBootDev = NULL;
+    int bRet = 0;
+    bRet= do_rk_firmware_upgrade((char *)"/tmp/RKLoader.bin", pCallback, pProgressCallback, szBootDev);
+    if(bRet){
+      result = INSTALL_SUCCESS;
+    } else {
+      result = INSTALL_ERROR;
+    }
+  }
+  ui->SetEnableReboot(true);
+  ui->Print("\n");
+
+  return result;
+}
+
+int install_rkloader_package(Package* package, const std::string_view package_id, RecoveryUI* ui) {
+  int result = INSTALL_SUCCESS;
+
+  LOG(INFO) << "install_rkloader_package Update package id: " << package_id;
+  if (!package) {
+    LOG(ERROR) << "package null in install_rkloader_package; aborting";
+    result = INSTALL_CORRUPT;
+  } else if (setup_install_mounts() != 0) {
+    LOG(ERROR) << "failed to set up expected mounts for install_rkloader_package; aborting";
+    result = INSTALL_ERROR;
+  } else {
+    result = really_install_rkloader_package(package, ui);
+  }
+
+  return result;
+}
diff --git a/install/wipe_data.cpp b/install/wipe_data.cpp
index 28720858..453fb1f5 100644
--- a/install/wipe_data.cpp
+++ b/install/wipe_data.cpp
@@ -32,11 +32,45 @@
 #include "recovery_ui/ui.h"
 #include "recovery_utils/logging.h"
 #include "recovery_utils/roots.h"
-
+#include "mtdutils/rk29.h"
 constexpr const char* CACHE_ROOT = "/cache";
 constexpr const char* DATA_ROOT = "/data";
 constexpr const char* METADATA_ROOT = "/metadata";
 
+/**
+ * reset hdmi after restore factory.
+*/
+#define BASEPARAMER_PARTITION_NAME "/baseparameter"
+#define BASEPARAMER_PARTITION_SIZE 1024*1024/2
+
+int erase_baseparameter() {
+    Volume* v = volume_for_mount_point(BASEPARAMER_PARTITION_NAME);
+    if (v == NULL) {
+        printf("unknown volume baseparamer, not erase baseparamer\n");
+        return -1;
+    }
+
+    int file;
+    file = open((v->blk_device).c_str(), O_RDWR);
+    if (file < 0){
+        printf("baseparamer file can not be opened");
+        return -1;
+    }
+    lseek(file, BASEPARAMER_PARTITION_SIZE, SEEK_SET);
+
+    //size of baseparameter.
+    char buf[BASEPARAMER_PARTITION_SIZE];
+    memset(buf, 0, BASEPARAMER_PARTITION_SIZE);
+    read(file, buf, BASEPARAMER_PARTITION_SIZE);
+
+    lseek(file, 0L, SEEK_SET);
+    write(file, (char*)(&buf), BASEPARAMER_PARTITION_SIZE);
+    close(file);
+    sync();
+
+    return 0;
+}
+
 static bool EraseVolume(const char* volume, RecoveryUI* ui, bool convert_fbe) {
   bool is_cache = (strcmp(volume, CACHE_ROOT) == 0);
   bool is_data = (strcmp(volume, DATA_ROOT) == 0);
@@ -125,6 +159,50 @@ bool WipeData(Device* device, bool convert_fbe) {
   if (success) {
     success &= device->PostWipeData();
   }
+  erase_baseparameter();
   ui->Print("Data wipe %s.\n", success ? "complete" : "failed");
   return success;
 }
+
+void SureMetadataMount() {
+  if (ensure_path_mounted(METADATA_ROOT)) {
+    printf("mount metadata fail,so formate...\n");
+    reset_tmplog_offset();
+    format_volume(METADATA_ROOT);
+    ensure_path_mounted(METADATA_ROOT);
+  }
+}
+void WipeFrp() {
+  printf("begin to wipe frp partion!\n");
+  int ret = format_volume("/frp");
+  if(ret<0){
+    printf("wiping frp failed!\n");
+  } else {
+    printf("wiping frp success!\n");
+  }
+}
+
+int ResizeData(){
+  Volume* v11 = volume_for_mount_point("/data");
+  int result = 0;
+
+  if (nullptr == v11){
+    printf("ResizeData failed! v11 is NULL \n");
+    return -1;
+  }
+
+  printf("ResizeData blk_device=%s \n", (v11->blk_device).c_str());
+  if(strcmp((v11->fs_type).c_str(), (char*)"f2fs") == 0){
+    if(rk_check_and_resizefs_f2fs((v11->blk_device).c_str())) {
+      printf("check and resize /data failed! blk_device=%s \n", (v11->blk_device).c_str());
+      result = -1;
+    }
+  }else{
+    if(rk_check_and_resizefs((v11->blk_device).c_str())) {
+      printf("check and resize /data failed! blk_device=%s \n", (v11->blk_device).c_str());
+      result = -1;
+    }
+  }
+
+  return result;
+}
-- 
2.35.1

