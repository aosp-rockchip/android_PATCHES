From 23e368223600a941405a642d1f5a2729d39d2ddd Mon Sep 17 00:00:00 2001
From: Dayao Ji <jdy@rock-chips.com>
Date: Fri, 8 Jan 2021 11:23:22 +0800
Subject: [PATCH 11/11] minui: support eink display

Signed-off-by: Dayao Ji <jdy@rock-chips.com>
Change-Id: Ib325c71af5c9f1e999abf1b9d7c46e7a869d2555
---
 minui/Android.bp                |   6 +
 minui/graphics.cpp              |  28 ++-
 minui/graphics_fbdev.cpp        | 295 +++++++++++++++++++++++---------
 minui/rgb888_to_gray_256_neon.s | 226 ++++++++++++++++++++++++
 4 files changed, 466 insertions(+), 89 deletions(-)
 create mode 100644 minui/rgb888_to_gray_256_neon.s

diff --git a/minui/Android.bp b/minui/Android.bp
index fff3a8ec..8ef011b3 100644
--- a/minui/Android.bp
+++ b/minui/Android.bp
@@ -31,6 +31,12 @@ cc_library {
         "graphics_drm.cpp",
         "graphics_fbdev.cpp",
         "resources.cpp",
+        "rgb888_to_gray_256_neon.s",
+    ],
+
+    cflags: [
+        "-Werror",
+        "-Wno-unused-parameter",
     ],
 
     whole_static_libs: [
diff --git a/minui/graphics.cpp b/minui/graphics.cpp
index d34da567..57fc7868 100644
--- a/minui/graphics.cpp
+++ b/minui/graphics.cpp
@@ -362,17 +362,31 @@ int gr_init() {
            ret);
   }
 
+  bool is_eink_fb = android::base::GetBoolProperty("sys.eink.recovery.eink_fb", false);
   auto backend = std::unique_ptr<MinuiBackend>{ std::make_unique<MinuiBackendAdf>() };
   gr_draw = backend->Init();
 
-  if (!gr_draw) {
-    backend = std::make_unique<MinuiBackendDrm>();
-    gr_draw = backend->Init();
-  }
+  if (is_eink_fb) {
+    printf("gr_init is eink fb\n");
+    if (!gr_draw) {
+      backend = std::make_unique<MinuiBackendFbdev>();
+      gr_draw = backend->Init();
+    }
 
-  if (!gr_draw) {
-    backend = std::make_unique<MinuiBackendFbdev>();
-    gr_draw = backend->Init();
+    if (!gr_draw) {
+      backend = std::make_unique<MinuiBackendDrm>();
+      gr_draw = backend->Init();
+    }
+  } else {
+    if (!gr_draw) {
+      backend = std::make_unique<MinuiBackendDrm>();
+      gr_draw = backend->Init();
+    }
+
+    if (!gr_draw) {
+      backend = std::make_unique<MinuiBackendFbdev>();
+      gr_draw = backend->Init();
+    }
   }
 
   if (!gr_draw) {
diff --git a/minui/graphics_fbdev.cpp b/minui/graphics_fbdev.cpp
index 2584017d..9b6cf4b4 100644
--- a/minui/graphics_fbdev.cpp
+++ b/minui/graphics_fbdev.cpp
@@ -32,6 +32,69 @@
 
 #include "minui/minui.h"
 
+#include <android-base/properties.h>
+
+#define EINK_FB_SIZE		(0x400000) /* 4M */
+#define GET_EBC_BUFFER		(0x7000)
+#define SET_EBC_SEND_BUFFER	(0x7001)
+#define GET_EBC_BUFFER_INFO (0x7002)
+
+#define EPD_NULL            (-1)
+#define EPD_AUTO            (0)
+#define EPD_OVERLAY         (1)
+#define EPD_FULL_GC16       (2)
+#define EPD_FULL_GL16       (3)
+#define EPD_FULL_GLR16     	(4)
+#define EPD_FULL_GLD16      (5)
+#define EPD_FULL_GCC16     	(6)
+#define EPD_PART_GC16       (7)
+#define EPD_PART_GL16       (8)
+#define EPD_PART_GLR16      (9)
+#define EPD_PART_GLD16		(10)
+#define EPD_PART_GCC16     	(11)
+#define EPD_A2       		(12)
+#define EPD_DU				(13)
+#define EPD_RESET        	(14)
+#define EPD_SUSPEND        	(15)
+#define EPD_RESUME        	(16)
+#define EPD_POWER_OFF        (17)
+#define EPD_PART_EINK        (18)
+#define EPD_FULL_EINK        (19)
+
+/*android use struct*/
+struct ebc_buf_info_t{
+  int offset;
+  int epd_mode;
+  int height;
+  int width;
+  int panel_color;
+  int win_x1;
+  int win_y1;
+  int win_x2;
+  int win_y2;
+  int width_mm;
+  int height_mm;
+}__packed;
+
+extern "C" {
+    void neon_rgb888_to_gray16ARM_32(uint8_t * dest,uint8_t *  src,int h,int w,int vir_w);
+}
+extern "C" {
+    void neon_rgb888_to_gray16ARM_16(uint8_t * dest,uint8_t *  src,int h,int w,int vir_w);
+}
+
+unsigned long ebc_buffer_base = 0;
+
+void neon_rgb888_to_gray16ARM(uint8_t * dest,uint8_t *  src,int h,int w,int vir_w)
+{
+  if ((vir_w % 32) == 0) {
+    neon_rgb888_to_gray16ARM_32(dest,src,h,w,vir_w);
+  }
+  else {
+    neon_rgb888_to_gray16ARM_16(dest,src,h,w,vir_w);
+  }
+}
+
 std::unique_ptr<GRSurfaceFbdev> GRSurfaceFbdev::Create(size_t width, size_t height,
                                                        size_t row_bytes, size_t pixel_bytes) {
   // Cannot use std::make_unique to access non-public ctor.
@@ -39,114 +102,182 @@ std::unique_ptr<GRSurfaceFbdev> GRSurfaceFbdev::Create(size_t width, size_t heig
 }
 
 void MinuiBackendFbdev::Blank(bool blank) {
-  int ret = ioctl(fb_fd, FBIOBLANK, blank ? FB_BLANK_POWERDOWN : FB_BLANK_UNBLANK);
-  if (ret < 0) perror("ioctl(): blank");
+  bool is_eink_fb = android::base::GetBoolProperty("sys.eink.recovery.eink_fb", false);
+  if (is_eink_fb) {
+    return;
+  } else {
+    int ret = ioctl(fb_fd, FBIOBLANK, blank ? FB_BLANK_POWERDOWN : FB_BLANK_UNBLANK);
+    if (ret < 0) perror("ioctl(): blank");
+  }
 }
 
 void MinuiBackendFbdev::SetDisplayedFramebuffer(size_t n) {
-  if (n > 1 || !double_buffered) return;
+  bool is_eink_fb = android::base::GetBoolProperty("sys.eink.recovery.eink_fb", false);
 
-  vi.yres_virtual = gr_framebuffer[0]->height * 2;
-  vi.yoffset = n * gr_framebuffer[0]->height;
-  vi.bits_per_pixel = gr_framebuffer[0]->pixel_bytes * 8;
-  if (ioctl(fb_fd, FBIOPUT_VSCREENINFO, &vi) < 0) {
-    perror("active fb swap failed");
+  if (is_eink_fb) {
+    return;
+  } else {
+    if (n > 1 || !double_buffered) return;
+
+    vi.yres_virtual = gr_framebuffer[0]->height * 2;
+    vi.yoffset = n * gr_framebuffer[0]->height;
+    vi.bits_per_pixel = gr_framebuffer[0]->pixel_bytes * 8;
+    if (ioctl(fb_fd, FBIOPUT_VSCREENINFO, &vi) < 0) {
+      perror("active fb swap failed");
+    }
+    displayed_buffer = n;
   }
-  displayed_buffer = n;
 }
 
 GRSurface* MinuiBackendFbdev::Init() {
-  android::base::unique_fd fd(open("/dev/graphics/fb0", O_RDWR | O_CLOEXEC));
-  if (fd == -1) {
-    perror("cannot open fb0");
-    return nullptr;
-  }
+  bool is_eink_fb = android::base::GetBoolProperty("sys.eink.recovery.eink_fb", false);
+  printf("Fbdev Init is_eink_fb=%d\n", is_eink_fb);
+  if (is_eink_fb) {
+    struct ebc_buf_info_t ebc_buf_info;
+    void* vaddr = NULL;
 
-  fb_fix_screeninfo fi;
-  if (ioctl(fd, FBIOGET_FSCREENINFO, &fi) < 0) {
-    perror("failed to get fb0 info");
-    return nullptr;
-  }
+    android::base::unique_fd ebc_fd(open("/dev/ebc", O_RDWR | O_CLOEXEC));
+    if (ebc_fd == -1) {
+      perror("cannot open open /dev/ebc\n");
+      return nullptr;
+    }
 
-  if (ioctl(fd, FBIOGET_VSCREENINFO, &vi) < 0) {
-    perror("failed to get fb0 info");
-    return nullptr;
-  }
+    if (ioctl(ebc_fd, GET_EBC_BUFFER_INFO, &ebc_buf_info) != 0) {
+      perror("cannot get ebc buffer info\n");
+      return nullptr;
+    }
 
-  // We print this out for informational purposes only, but
-  // throughout we assume that the framebuffer device uses an RGBX
-  // pixel format.  This is the case for every development device I
-  // have access to.  For some of those devices (eg, hammerhead aka
-  // Nexus 5), FBIOGET_VSCREENINFO *reports* that it wants a
-  // different format (XBGR) but actually produces the correct
-  // results on the display when you write RGBX.
-  //
-  // If you have a device that actually *needs* another pixel format
-  // (ie, BGRX, or 565), patches welcome...
-
-  printf(
-      "fb0 reports (possibly inaccurate):\n"
-      "  vi.bits_per_pixel = %d\n"
-      "  vi.red.offset   = %3d   .length = %3d\n"
-      "  vi.green.offset = %3d   .length = %3d\n"
-      "  vi.blue.offset  = %3d   .length = %3d\n",
-      vi.bits_per_pixel, vi.red.offset, vi.red.length, vi.green.offset, vi.green.length,
-      vi.blue.offset, vi.blue.length);
-
-  void* bits = mmap(0, fi.smem_len, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
-  if (bits == MAP_FAILED) {
-    perror("failed to mmap framebuffer");
-    return nullptr;
-  }
+    vaddr = mmap(0, EINK_FB_SIZE*4, PROT_READ|PROT_WRITE, MAP_SHARED, ebc_fd, 0);
+    if (vaddr == MAP_FAILED) {
+      perror("Error mapping the ebc buffer\n");
+      return nullptr;
+    }
+    ebc_buffer_base = intptr_t(vaddr);
 
-  memset(bits, 0, fi.smem_len);
 
-  gr_framebuffer[0] =
-      GRSurfaceFbdev::Create(vi.xres, vi.yres, fi.line_length, vi.bits_per_pixel / 8);
-  gr_framebuffer[0]->buffer_ = static_cast<uint8_t*>(bits);
-  memset(gr_framebuffer[0]->buffer_, 0, gr_framebuffer[0]->height * gr_framebuffer[0]->row_bytes);
+    gr_framebuffer[0] =
+        GRSurfaceFbdev::Create(ebc_buf_info.width, ebc_buf_info.height, ebc_buf_info.width * 4, 4);
+    memory_buffer.resize(gr_framebuffer[0]->height * gr_framebuffer[0]->row_bytes);
+    gr_framebuffer[0]->buffer_ = memory_buffer.data();
+    memset(gr_framebuffer[0]->buffer_, 0, gr_framebuffer[0]->height * gr_framebuffer[0]->row_bytes);
+	gr_draw = gr_framebuffer[0].get();
+    memset(gr_draw->buffer_, 0, gr_draw->height * gr_draw->row_bytes);
 
-  gr_framebuffer[1] =
-      GRSurfaceFbdev::Create(gr_framebuffer[0]->width, gr_framebuffer[0]->height,
-                             gr_framebuffer[0]->row_bytes, gr_framebuffer[0]->pixel_bytes);
+	fb_fd = std::move(ebc_fd);
+    printf("framebuffer: %d (%zu x %zu)\n", fb_fd.get(), gr_draw->width, gr_draw->height);
+  } else {
+    android::base::unique_fd fd(open("/dev/graphics/fb0", O_RDWR | O_CLOEXEC));
+    if (fd == -1) {
+      perror("cannot open fb0");
+      return nullptr;
+    }
 
-  /* check if we can use double buffering */
-  if (vi.yres * fi.line_length * 2 <= fi.smem_len) {
-    double_buffered = true;
+    fb_fix_screeninfo fi;
+    if (ioctl(fd, FBIOGET_FSCREENINFO, &fi) < 0) {
+      perror("failed to get fb0 info");
+      return nullptr;
+    }
 
-    gr_framebuffer[1]->buffer_ =
-        gr_framebuffer[0]->buffer_ + gr_framebuffer[0]->height * gr_framebuffer[0]->row_bytes;
-  } else {
-    double_buffered = false;
+    if (ioctl(fd, FBIOGET_VSCREENINFO, &vi) < 0) {
+      perror("failed to get fb0 info");
+      return nullptr;
+    }
 
-    // Without double-buffering, we allocate RAM for a buffer to draw in, and then "flipping" the
-    // buffer consists of a memcpy from the buffer we allocated to the framebuffer.
-    memory_buffer.resize(gr_framebuffer[1]->height * gr_framebuffer[1]->row_bytes);
-    gr_framebuffer[1]->buffer_ = memory_buffer.data();
-  }
+    // We print this out for informational purposes only, but
+    // throughout we assume that the framebuffer device uses an RGBX
+    // pixel format.  This is the case for every development device I
+    // have access to.  For some of those devices (eg, hammerhead aka
+    // Nexus 5), FBIOGET_VSCREENINFO *reports* that it wants a
+    // different format (XBGR) but actually produces the correct
+    // results on the display when you write RGBX.
+    //
+    // If you have a device that actually *needs* another pixel format
+    // (ie, BGRX, or 565), patches welcome...
+
+    printf(
+        "fb0 reports (possibly inaccurate):\n"
+        "  vi.bits_per_pixel = %d\n"
+        "  vi.red.offset   = %3d   .length = %3d\n"
+        "  vi.green.offset = %3d   .length = %3d\n"
+        "  vi.blue.offset  = %3d   .length = %3d\n",
+        vi.bits_per_pixel, vi.red.offset, vi.red.length, vi.green.offset, vi.green.length,
+        vi.blue.offset, vi.blue.length);
+
+    void* bits = mmap(0, fi.smem_len, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
+    if (bits == MAP_FAILED) {
+      perror("failed to mmap framebuffer");
+      return nullptr;
+    }
+
+    memset(bits, 0, fi.smem_len);
+
+    gr_framebuffer[0] =
+        GRSurfaceFbdev::Create(vi.xres, vi.yres, fi.line_length, vi.bits_per_pixel / 8);
+    gr_framebuffer[0]->buffer_ = static_cast<uint8_t*>(bits);
+    memset(gr_framebuffer[0]->buffer_, 0, gr_framebuffer[0]->height * gr_framebuffer[0]->row_bytes);
 
-  gr_draw = gr_framebuffer[1].get();
-  memset(gr_draw->buffer_, 0, gr_draw->height * gr_draw->row_bytes);
-  fb_fd = std::move(fd);
-  SetDisplayedFramebuffer(0);
+    gr_framebuffer[1] =
+        GRSurfaceFbdev::Create(gr_framebuffer[0]->width, gr_framebuffer[0]->height,
+                               gr_framebuffer[0]->row_bytes, gr_framebuffer[0]->pixel_bytes);
 
-  printf("framebuffer: %d (%zu x %zu)\n", fb_fd.get(), gr_draw->width, gr_draw->height);
+    /* check if we can use double buffering */
+    if (vi.yres * fi.line_length * 2 <= fi.smem_len) {
+      double_buffered = true;
 
-  Blank(true);
-  Blank(false);
+      gr_framebuffer[1]->buffer_ =
+          gr_framebuffer[0]->buffer_ + gr_framebuffer[0]->height * gr_framebuffer[0]->row_bytes;
+    } else {
+      double_buffered = false;
+
+      // Without double-buffering, we allocate RAM for a buffer to draw in, and then "flipping" the
+      // buffer consists of a memcpy from the buffer we allocated to the framebuffer.
+      memory_buffer.resize(gr_framebuffer[1]->height * gr_framebuffer[1]->row_bytes);
+      gr_framebuffer[1]->buffer_ = memory_buffer.data();
+    }
+
+    gr_draw = gr_framebuffer[1].get();
+    memset(gr_draw->buffer_, 0, gr_draw->height * gr_draw->row_bytes);
+    fb_fd = std::move(fd);
+    SetDisplayedFramebuffer(0);
+
+    printf("framebuffer: %d (%zu x %zu)\n", fb_fd.get(), gr_draw->width, gr_draw->height);
+
+    Blank(true);
+    Blank(false);
+  }
 
   return gr_draw;
 }
 
 GRSurface* MinuiBackendFbdev::Flip() {
-  if (double_buffered) {
-    // Change gr_draw to point to the buffer currently displayed, then flip the driver so we're
-    // displaying the other buffer instead.
-    gr_draw = gr_framebuffer[displayed_buffer].get();
-    SetDisplayedFramebuffer(1 - displayed_buffer);
+  bool is_eink_fb = android::base::GetBoolProperty("sys.eink.recovery.eink_fb", false);
+
+  if (is_eink_fb) {
+    struct ebc_buf_info_t buf_info;
+
+    if (ioctl(fb_fd, GET_EBC_BUFFER, &buf_info) != 0) {
+        perror("GET_EBC_BUFFER failed\n");
+    }
+    neon_rgb888_to_gray16ARM((uint8_t*)(ebc_buffer_base + buf_info.offset), (uint8_t*)(gr_draw->buffer_), buf_info.height, buf_info.width, buf_info.width);
+    buf_info.win_x1= 0;
+    buf_info.win_y1= 0;
+    buf_info.win_x2= buf_info.width;
+    buf_info.win_y2= buf_info.height;
+    buf_info.epd_mode = EPD_PART_GC16;
+
+    if (ioctl(fb_fd, SET_EBC_SEND_BUFFER, &buf_info) !=0 ) {
+        perror("SET_EBC_SEND_BUFFER failed");
+    }
   } else {
-    // Copy from the in-memory surface to the framebuffer.
-    memcpy(gr_framebuffer[0]->buffer_, gr_draw->buffer_, gr_draw->height * gr_draw->row_bytes);
+    if (double_buffered) {
+      // Change gr_draw to point to the buffer currently displayed, then flip the driver so we're
+      // displaying the other buffer instead.
+      gr_draw = gr_framebuffer[displayed_buffer].get();
+      SetDisplayedFramebuffer(1 - displayed_buffer);
+    } else {
+      // Copy from the in-memory surface to the framebuffer.
+      memcpy(gr_framebuffer[0]->buffer_, gr_draw->buffer_, gr_draw->height * gr_draw->row_bytes);
+    }
   }
   return gr_draw;
 }
diff --git a/minui/rgb888_to_gray_256_neon.s b/minui/rgb888_to_gray_256_neon.s
new file mode 100644
index 00000000..8ae79828
--- /dev/null
+++ b/minui/rgb888_to_gray_256_neon.s
@@ -0,0 +1,226 @@
+
+
+.text
+.global neon_rgb888_to_gray16ARM_32
+
+
+
+
+neon_rgb888_to_gray16ARM_32:
+
+	@ r0 = dest
+	@ r1 = src
+	@ r2 = h
+	@ r3 = w
+
+		mov			  r12,r13
+		push      {r4,r5,r6,r7,r8,r9,r10,r11,lr}
+		ldmfd			r12,{r7}       @r7 = vir_width
+		mov       r8,r3
+		mul     	r2,r2,r7
+		mov     	r3,#11
+		mov     	r4,#16
+		mov     	r5,#5
+		mov       r9,#0x00
+		mov       r11,r0
+		vdup.8  	d4,r3
+		vdup.8  	d5,r4
+		vdup.8  	d6,r5
+		mov       r3,#00
+LOOP:
+		vld4.8  	{d0-d3},[r1]!
+		vld4.8  	{d7-d10},[r1]!
+		vld4.8  	{d11-d14},[r1]!
+		vld4.8  	{d15-d18},[r1]!
+
+		vmull.u8  q10,d0,d4
+		vmlal.u8  q10,d1,d5
+		vmlal.u8  q10,d2,d6
+		vshr.u16 	q11,q10,#9
+		vmov.u16   r5,d22[0]
+		and        r6,r5,#0x0000000f
+		vmov.u16   r5,d22[1]
+		orr        r6,r6,r5,lsl #4
+		vmov.u16   r5,d22[2]
+		orr      	 r6,r6,r5,lsl #8
+		vmov.u16   r5,d22[3]
+		orr        r6,r6,r5,lsl #12
+		vmov.u16   r5,d23[0]
+		orr        r6,r6,r5,lsl #16
+		vmov.u16   r5,d23[1]
+		orr        r6,r6,r5,lsl #20
+		vmov.u16   r5,d23[2]
+		orr      	 r6,r6,r5,lsl #24
+		vmov.u16   r5,d23[3]
+		orr        r6,r6,r5,lsl #28
+		str        r6,[r0],#4
+
+		vmull.u8  q10,d7,d4
+		vmlal.u8  q10,d8,d5
+		vmlal.u8  q10,d9,d6
+		vshr.u16 	q11,q10,#9
+		vmov.u16   r5,d22[0]
+		and        r6,r5,#0x0000000f
+		vmov.u16   r5,d22[1]
+		orr        r6,r6,r5,lsl #4
+		vmov.u16   r5,d22[2]
+		orr      	 r6,r6,r5,lsl #8
+		vmov.u16   r5,d22[3]
+		orr        r6,r6,r5,lsl #12
+		vmov.u16   r5,d23[0]
+		orr        r6,r6,r5,lsl #16
+		vmov.u16   r5,d23[1]
+		orr        r6,r6,r5,lsl #20
+		vmov.u16   r5,d23[2]
+		orr      	 r6,r6,r5,lsl #24
+		vmov.u16   r5,d23[3]
+		orr        r6,r6,r5,lsl #28
+		str        r6,[r0],#4
+
+
+
+		vmull.u8  q10,d11,d4
+		vmlal.u8  q10,d12,d5
+		vmlal.u8  q10,d13,d6
+		vshr.u16 	q11,q10,#9
+		vmov.u16   r5,d22[0]
+		and        r6,r5,#0x0000000f
+		vmov.u16   r5,d22[1]
+		orr        r6,r6,r5,lsl #4
+		vmov.u16   r5,d22[2]
+		orr      	 r6,r6,r5,lsl #8
+		vmov.u16   r5,d22[3]
+		orr        r6,r6,r5,lsl #12
+		vmov.u16   r5,d23[0]
+		orr        r6,r6,r5,lsl #16
+		vmov.u16   r5,d23[1]
+		orr        r6,r6,r5,lsl #20
+		vmov.u16   r5,d23[2]
+		orr      	 r6,r6,r5,lsl #24
+		vmov.u16   r5,d23[3]
+		orr        r6,r6,r5,lsl #28
+		str        r6,[r0],#4
+
+		vmull.u8  q10,d15,d4
+		vmlal.u8  q10,d16,d5
+		vmlal.u8  q10,d17,d6
+		vshr.u16 	q11,q10,#9
+
+		vmov.u16   r5,d22[0]
+		and        r6,r5,#0x0000000f
+		vmov.u16   r5,d22[1]
+		orr        r6,r6,r5,lsl #4
+		vmov.u16   r5,d22[2]
+		orr      	 r6,r6,r5,lsl #8
+		vmov.u16   r5,d22[3]
+		orr        r6,r6,r5,lsl #12
+		vmov.u16   r5,d23[0]
+		orr        r6,r6,r5,lsl #16
+		vmov.u16   r5,d23[1]
+		orr        r6,r6,r5,lsl #20
+		vmov.u16   r5,d23[2]
+		orr      	 r6,r6,r5,lsl #24
+		vmov.u16   r5,d23[3]
+		orr        r6,r6,r5,lsl #28
+		str        r6,[r0],#4
+
+
+		add       r9,r9,#32
+		add       r3,r3,#32
+		cmp       r3,r7
+	  bne       ADD_TO_LOOP
+	  mov       r3,#00
+	  add       r11,r11,r8,lsr #1
+		mov       r0,r11
+ADD_TO_LOOP:
+		cmp       r9,r2
+		blo       LOOP
+		pop       {r4,r5,r6,r7,r8,r9,r10,r11,pc}
+
+
+
+
+.text
+.global neon_rgb888_to_gray16ARM_16
+
+neon_rgb888_to_gray16ARM_16:
+
+	@ r0 = dest
+	@ r1 = src
+	@ r2 = h
+	@ r3 = w
+
+		mov			  r12,r13
+		push      {r4,r5,r6,r7,r8,r9,r10,r11,lr}
+		ldmfd			r12,{r7}       @r7 = vir_width
+		mov       r8,r3
+		mul     	r2,r2,r7
+		mov     	r3,#11
+		mov     	r4,#16
+		mov     	r5,#5
+		mov       r9,#0x00
+		mov       r11,r0
+		vdup.8  	d4,r3
+		vdup.8  	d5,r4
+		vdup.8  	d6,r5
+		mov       r3,#00
+LOOP_16:
+		vld4.8  	{d0-d3},[r1]!
+		vld4.8  	{d7-d10},[r1]!
+
+		vmull.u8  q10,d0,d4
+		vmlal.u8  q10,d1,d5
+		vmlal.u8  q10,d2,d6
+		vshr.u16 	q11,q10,#9
+		vmov.u16   r5,d22[0]
+		and        r6,r5,#0x0000000f
+		vmov.u16   r5,d22[1]
+		orr        r6,r6,r5,lsl #4
+		vmov.u16   r5,d22[2]
+		orr      	 r6,r6,r5,lsl #8
+		vmov.u16   r5,d22[3]
+		orr        r6,r6,r5,lsl #12
+		vmov.u16   r5,d23[0]
+		orr        r6,r6,r5,lsl #16
+		vmov.u16   r5,d23[1]
+		orr        r6,r6,r5,lsl #20
+		vmov.u16   r5,d23[2]
+		orr      	 r6,r6,r5,lsl #24
+		vmov.u16   r5,d23[3]
+		orr        r6,r6,r5,lsl #28
+		str        r6,[r0],#4
+
+		vmull.u8  q10,d7,d4
+		vmlal.u8  q10,d8,d5
+		vmlal.u8  q10,d9,d6
+		vshr.u16 	q11,q10,#9
+		vmov.u16   r5,d22[0]
+		and        r6,r5,#0x0000000f
+		vmov.u16   r5,d22[1]
+		orr        r6,r6,r5,lsl #4
+		vmov.u16   r5,d22[2]
+		orr      	 r6,r6,r5,lsl #8
+		vmov.u16   r5,d22[3]
+		orr        r6,r6,r5,lsl #12
+		vmov.u16   r5,d23[0]
+		orr        r6,r6,r5,lsl #16
+		vmov.u16   r5,d23[1]
+		orr        r6,r6,r5,lsl #20
+		vmov.u16   r5,d23[2]
+		orr      	 r6,r6,r5,lsl #24
+		vmov.u16   r5,d23[3]
+		orr        r6,r6,r5,lsl #28
+		str        r6,[r0],#4
+
+
+		add       r9,r9,#16
+		add       r3,r3,#16
+		cmp       r3,r7
+	  bne       ADD_TO_LOOP_16
+	  mov       r3,#00
+	  add       r11,r11,r8,lsr #1
+		mov       r0,r11
+ADD_TO_LOOP_16:
+		cmp       r9,r2
+		blo       LOOP_16
+		pop       {r4,r5,r6,r7,r8,r9,r10,r11,pc}
\ No newline at end of file
-- 
2.36.0

