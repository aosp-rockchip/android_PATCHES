From 2af859898c0d8692683818339a50dd478a6a50cd Mon Sep 17 00:00:00 2001
From: Longjian Lin <llj@rock-chips.com>
Date: Wed, 9 Sep 2020 11:44:47 +0800
Subject: [PATCH 04/24] bt: bt interface sync rk code

Change-Id: If9be582423e24fb597c33d25c3a77e7866b76308
Signed-off-by: Longjian Lin <llj@rock-chips.com>
---
 bluetooth/1.0/default/Android.bp           |   1 +
 bluetooth/1.0/default/bluetooth_address.cc | 171 ++++++++++++++++++++-
 bluetooth/1.0/default/vendor_interface.cc  |  20 ++-
 3 files changed, 182 insertions(+), 10 deletions(-)

diff --git a/bluetooth/1.0/default/Android.bp b/bluetooth/1.0/default/Android.bp
index f66c25e97..c4914ccba 100644
--- a/bluetooth/1.0/default/Android.bp
+++ b/bluetooth/1.0/default/Android.bp
@@ -31,6 +31,7 @@ cc_library_shared {
         "libhidlbase",
         "liblog",
         "libutils",
+	"librkwifi-ctrl",
     ],
     static_libs: [
         "android.hardware.bluetooth-async",
diff --git a/bluetooth/1.0/default/bluetooth_address.cc b/bluetooth/1.0/default/bluetooth_address.cc
index 93a546995..21710e01f 100644
--- a/bluetooth/1.0/default/bluetooth_address.cc
+++ b/bluetooth/1.0/default/bluetooth_address.cc
@@ -21,6 +21,7 @@
 #include <fcntl.h>
 #include <unistd.h>
 #include <utils/Log.h>
+#include <sys/time.h>
 
 namespace android {
 namespace hardware {
@@ -43,14 +44,135 @@ bool BluetoothAddress::string_to_bytes(const char* addr_str, uint8_t* addr) {
                  &trailing_char) == kBytes);
 }
 
+#include <sys/ioctl.h>
+
+typedef     unsigned short      uint16;
+typedef     unsigned int       uint32;
+typedef     unsigned char       uint8;
+
+#define VENDOR_REQ_TAG      0x56524551
+#define VENDOR_READ_IO      _IOW('v', 0x01, unsigned int)
+#define VENDOR_WRITE_IO     _IOW('v', 0x02, unsigned int)
+
+#define VENDOR_SN_ID        1
+#define VENDOR_WIFI_MAC_ID  2
+#define VENDOR_LAN_MAC_ID   3
+#define VENDOR_BLUETOOTH_ID 4
+
+struct rk_vendor_req {
+    uint32 tag;
+    uint16 id;
+    uint16 len;
+    uint8 data[1];
+};
+
+// rw: 0, read; 1, write
+// return 0 is success, other fail
+static int bt_addr_vendor_storage_read_or_write(int rw, char *buf, int len)
+{
+    int ret ;
+    uint8 p_buf[64];
+    struct rk_vendor_req *req;
+
+    req = (struct rk_vendor_req *)p_buf;
+    int sys_fd = open("/dev/vendor_storage",O_RDWR,0);
+    if(sys_fd < 0){
+        ALOGE("vendor_storage open fail\n");
+        return -1;
+    }
+
+    req->tag = VENDOR_REQ_TAG;
+    req->id = VENDOR_BLUETOOTH_ID;
+
+    if (rw == 0) {
+        req->len = len;
+        ret = ioctl(sys_fd, VENDOR_READ_IO, req);
+        if (!ret) {
+            memcpy(buf, req->data, 6);
+        }
+    } else {
+        req->len = len;
+        for (int i = 0; i < 6; i++)
+            req->data[i] = buf[i];
+        ret = ioctl(sys_fd, VENDOR_WRITE_IO, req);
+    }
+    if(ret){
+        ALOGE("vendor storage %s error\n", rw ? "write":"read");
+        close(sys_fd);
+        return -2;
+    }
+
+    ALOGE("vendor storage %s success\n", rw ? "write":"read");
+    close(sys_fd);
+    return 0;
+}
+
 bool BluetoothAddress::get_local_address(uint8_t* local_addr) {
   char property[PROPERTY_VALUE_MAX] = {0};
+  bool valid_bda = false;
+  const uint8_t null_bdaddr[kBytes] = {0,0,0,0,0,0};
+
+      if (!valid_bda) {
+        int ret;
+        char bd_addr[6] = {0};
+        ret = bt_addr_vendor_storage_read_or_write(0, bd_addr, 6);
+        if (ret == 0) {
+            memcpy(local_addr, bd_addr, 6);
+
+            valid_bda = true;
+            ALOGE("Got local bdaddr for vendor storage %02X:%02X:%02X:%02X:%02X:%02X",
+                local_addr[0], local_addr[1], local_addr[2],
+                local_addr[3], local_addr[4], local_addr[5]);
+        } /*else if (ret == -2) {
+            local_addr[0] = 0x22;
+            local_addr[1] = 0x22;
+	    local_addr[2] = (uint8_t)rand();
+	    local_addr[3] = (uint8_t)rand();
+	    local_addr[4] = (uint8_t)rand();
+	    local_addr[5] = (uint8_t)rand();
+
+            valid_bda = true;
+            memcpy(bd_addr, local_addr, 6);
+            ALOGE("Generate random bdaddr and save to vendor storage %02X:%02X:%02X:%02X:%02X:%02X",
+                local_addr[0], local_addr[1], local_addr[2],
+                local_addr[3], local_addr[4], local_addr[5]);
+            bt_addr_vendor_storage_read_or_write(1, bd_addr, 6);
+        }*/
+    }
+
+    if (!valid_bda) {// cmy@2012-11-28: Get local bdaddr from vflash
+        int vflash_fd = open("/dev/vflash", O_RDONLY);
+        if (vflash_fd > 0)
+        {
+            char bd_addr[6] = {0};
+            ALOGE("Get local bdaddr from vflash");
+            #define VFLASH_READ_BDA  0x01
+            if(ioctl(vflash_fd, VFLASH_READ_BDA, (unsigned long)bd_addr) >= 0
+                && memcmp(bd_addr, null_bdaddr, kBytes) != 0)
+            {
+                local_addr[0] = bd_addr[5];
+                local_addr[1] = bd_addr[4];
+                local_addr[2] = bd_addr[3];
+                local_addr[3] = bd_addr[2];
+                local_addr[4] = bd_addr[1];
+                local_addr[5] = bd_addr[0];
+
+                valid_bda = true;
+                ALOGE("Got Factory BDA %02X:%02X:%02X:%02X:%02X:%02X",
+                    local_addr[0], local_addr[1], local_addr[2],
+                    local_addr[3], local_addr[4], local_addr[5]);
+            }
+            close(vflash_fd);
+        }
+    }
 
   // Get local bdaddr storage path from a system property.
   if (property_get(PROPERTY_BT_BDADDR_PATH, property, NULL)) {
+    int addr_fd;
+
     ALOGD("%s: Trying %s", __func__, property);
 
-    int addr_fd = open(property, O_RDONLY);
+    addr_fd = open(property, O_RDONLY);
     if (addr_fd != -1) {
       char address[kStringLength + 1] = {0};
       int bytes_read = read(addr_fd, address, kStringLength);
@@ -67,8 +189,8 @@ bool BluetoothAddress::get_local_address(uint8_t* local_addr) {
       const uint8_t zero_bdaddr[kBytes] = {0, 0, 0, 0, 0, 0};
       if ((string_to_bytes(address, local_addr)) &&
           (memcmp(local_addr, zero_bdaddr, kBytes) != 0)) {
+        valid_bda = true;
         ALOGD("%s: Got Factory BDA %s", __func__, address);
-        return true;
       } else {
         ALOGE("%s: Got Invalid BDA '%s' from %s", __func__, address, property);
       }
@@ -76,18 +198,53 @@ bool BluetoothAddress::get_local_address(uint8_t* local_addr) {
   }
 
   // No BDADDR found in the file. Look for BDA in a factory property.
-  if (property_get(FACTORY_BDADDR_PROPERTY, property, NULL) &&
+  if (!valid_bda && property_get(FACTORY_BDADDR_PROPERTY, property, NULL) &&
       string_to_bytes(property, local_addr)) {
-    return true;
+    valid_bda = true;
   }
 
   // No factory BDADDR found. Look for a previously stored BDA.
-  if (property_get(PERSIST_BDADDR_PROPERTY, property, NULL) &&
+  if (!valid_bda && property_get(PERSIST_BDADDR_PROPERTY, property, NULL) &&
       string_to_bytes(property, local_addr)) {
-    return true;
+    valid_bda = true;
+  }
+
+  /* Generate new BDA if necessary */
+  if (!valid_bda) {
+    char bdstr[kStringLength + 1];
+    struct	timeval    tv;
+    struct	timezone   tz;
+    gettimeofday(&tv,&tz);
+
+    /* No autogen BDA. Generate one now. */
+    local_addr[0] = 0x22;
+    local_addr[1] = 0x22;
+    //local_addr[2] = (uint8_t)rand();
+    //local_addr[3] = (uint8_t)rand();
+    //local_addr[4] = (uint8_t)rand();
+    //local_addr[5] = (uint8_t)rand();
+    local_addr[2]	= (uint8_t) (tv.tv_usec & 0xFF);
+    local_addr[3]	= (uint8_t) ((tv.tv_usec >> 8) & 0xFF);
+    local_addr[4] = (uint8_t) ((tv.tv_usec >> 16) & 0xFF);
+    local_addr[5] = (uint8_t) ((tv.tv_usec >> 24) & 0xFF);
+
+    /* Convert to ascii, and store as a persistent property */
+    bytes_to_string(local_addr, bdstr);
+
+    ALOGE("%s: No preset BDA! Generating BDA: %s for prop %s", __func__,
+          (char*)bdstr, PERSIST_BDADDR_PROPERTY);
+    ALOGE("%s: This is a bug in the platform!  Please fix!", __func__);
+
+    if (property_set(PERSIST_BDADDR_PROPERTY, (char*)bdstr) < 0) {
+      ALOGE("%s: Failed to set random BDA in prop %s", __func__,
+            PERSIST_BDADDR_PROPERTY);
+      valid_bda = false;
+    } else {
+      valid_bda = true;
+    }
   }
 
-  return false;
+  return valid_bda;
 }
 
 }  // namespace implementation
diff --git a/bluetooth/1.0/default/vendor_interface.cc b/bluetooth/1.0/default/vendor_interface.cc
index d809313db..268d62f9e 100644
--- a/bluetooth/1.0/default/vendor_interface.cc
+++ b/bluetooth/1.0/default/vendor_interface.cc
@@ -28,6 +28,7 @@
 #include "mct_protocol.h"
 
 static const char* VENDOR_LIBRARY_NAME = "libbt-vendor.so";
+static const char* VENDOR_REALTEK_LIBRARY_NAME = "libbt-vendor-realtek.so";
 static const char* VENDOR_LIBRARY_SYMBOL_NAME =
     "BLUETOOTH_VENDOR_LIB_INTERFACE";
 
@@ -182,18 +183,31 @@ void VendorInterface::Shutdown() {
 
 VendorInterface* VendorInterface::get() { return g_vendor_interface; }
 
+static char wifi_type[64] = {0};
+extern "C" int check_wifi_chip_type_string(char *type);
+
 bool VendorInterface::Open(InitializeCompleteCallback initialize_complete_cb,
                            PacketReadCallback event_cb,
                            PacketReadCallback acl_cb,
                            PacketReadCallback sco_cb,
                            PacketReadCallback iso_cb) {
   initialize_complete_cb_ = initialize_complete_cb;
+  char vendor_lib_name[32];
 
   // Initialize vendor interface
+  if (wifi_type[0] == 0)
+	  check_wifi_chip_type_string(wifi_type);
+  if ((0 == strncmp(wifi_type, "RTL", 3)) ||
+      (0 == strncmp(wifi_type, "SSV", 3))) { // for ssv6051 wifi + rtl8761 bt
+    strcpy(vendor_lib_name, VENDOR_REALTEK_LIBRARY_NAME);
+  } else {
+    strcpy(vendor_lib_name, VENDOR_LIBRARY_NAME);
+  }
 
-  lib_handle_ = dlopen(VENDOR_LIBRARY_NAME, RTLD_NOW);
+  ALOGD("%s: %s", __func__, vendor_lib_name);
+  lib_handle_ = dlopen(vendor_lib_name, RTLD_NOW);
   if (!lib_handle_) {
-    ALOGE("%s unable to open %s (%s)", __func__, VENDOR_LIBRARY_NAME,
+    ALOGE("%s unable to open %s (%s)", __func__, vendor_lib_name,
           dlerror());
     return false;
   }
@@ -202,7 +216,7 @@ bool VendorInterface::Open(InitializeCompleteCallback initialize_complete_cb,
       dlsym(lib_handle_, VENDOR_LIBRARY_SYMBOL_NAME));
   if (!lib_interface_) {
     ALOGE("%s unable to find symbol %s in %s (%s)", __func__,
-          VENDOR_LIBRARY_SYMBOL_NAME, VENDOR_LIBRARY_NAME, dlerror());
+          VENDOR_LIBRARY_SYMBOL_NAME, vendor_lib_name, dlerror());
     return false;
   }
 
-- 
2.36.0

